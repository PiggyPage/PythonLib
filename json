[Python标准库]json——JavaScript 对象记法
    作用：将 Python 对象编码为 JSON 串，以及将 JSON 串解码为 Python 对象。
    Python 版本：2.6 及以后版本
    json 模块提供了一个与 pickle 类似的 API，可以将内存中的 Python 对象转换为一个串行化表示，称为 JavaScript 对象记法（JavaScript  Object Notation，JSON）。不同于 pickle，JSON 有一个优点，它有多种语言的实现（特别是 JavaScript）。JSON 最广泛地应用于 AJAX 应用中 Web 服务器和客户之间的通信，不过也可以用于满足其他应用间的通信需求。
编码和解码简单数据类型
    默认情况下，编码器支持 Python 的一些内置类型（string、unicode、int、float、list、tuple 和 dict）。

import json

data = [ { 'a':'A', 'b':(2, 4), 'c':3.0 } ]
print 'DATA:', repr(data)

data_string = json.dumps(data)
print 'JSON:', data_string

    对值编码时，表面上类似于 Python 的 repr() 的输出。
    编码然后再重新解码时，可能不会得到完全相同的对象类型。

import json

data = [ { 'a':'A', 'b':(2, 4), 'c':3.0 } ]
print 'DATA:', data

data_string = json.dumps(data)
print 'ENCODED:', data_string

decoded = json.loads(data_string)
print 'DECODED:', decoded

print 'ORIGINAL:', type(data[0]['b'])
print 'DECODED :', type(decoded[0]['b'])

    具体地，字符串会转换为 unicode 对象，而元组会变成列表。
优质输出和紧凑输出
    JSON 优于 pickle 的另一个好处是，其结果是人类可读的。dumps() 函数接受多个参数，可以使输出更美观。例如，sort_keys 标志会告诉编码器按有序顺序而不是随机顺序输出字典的键。

import json

data = [ { 'a':'A', 'b':(2, 4), 'c':3.0 } ]
print 'DATA:', repr(data)

unsorted = json.dumps(data)
print 'JSON:', json.dumps(data)
print 'SORT:', json.dumps(data, sort_keys=True)

first = json.dumps(data, sort_keys=True)
second = json.dumps(data, sort_keys=True)

print 'UNSORTED MATCH:', unsorted == first
print 'SORTED MATCH  :', first == second

    排序后，人类查看结果会更为容易，而且还可以在测试中比较 JSON 输出。
    对于高度嵌套的数据结构，还可以指定一个（indent）值，来得到格式美观的输出。

import json

data = [ { 'a':'A', 'b':(2, 4), 'c':3.0 } ]
print 'DATA:', repr(data)

print 'NORMAL:', json.dumps(data, sort_keys=True)
print 'INDENT:', json.dumps(data, sort_keys=True, indent=2)

    当缩进是一个非负整数时，输出更类似于 pprint 的输出。数据结构中每一级的前导空格与其缩进级别匹配。
    不过，这样的详细输出会增加传输等量数据所需的字节数，所以生产环境中往往不使用这种输出。实际上，可以调整编码输出中分隔数据的设置，使之比默认格式更为紧凑。

import json

data = [ { 'a':'A', 'b':(2, 4), 'c':3.0 } ]
print 'DATA:', repr(data)

print 'repr(data)             :', len(repr(data))

plain_dump = json.dumps(data)
print 'dumps(data)            :', len(plain_dump)

small_indent = json.dumps(data, indent=2)
print 'dumps(data, indent=2)  :', len(small_indent)

with_separators = json.dumps(data, separators=(',',':'))
print 'dumps(data, separators):', len(with_separators)

    dumps() 的分隔符（separators）参数应当是一个元组，其中包含用来分隔列表中各项的字符串，以及分隔字典中键和值的字符串。默认为 （',',':'）。通过去除空白符，可以生成一个更为紧凑的输出。
编码字典
    JSON 格式要求字典的键是字符串。如果一个字典以非串类型作为键，对这个字典编码时，会生成一个异常。（异常类型取决于是加载了模块的纯 Python 版本还是快速的 C 版本，不过异常无非是 TypeError 或 ValueError）。要想绕开这个限制，一种办法是使用 skipkeys 参数告诉编码器跳过非串的键。

import json

data = [ { 'a':'A', 'b':(2, 4), 'c':3.0, ('d',):'D tuple' } ]

print 'First attempt'
try:
	print json.dumps(data)
except (TypeError, ValueError), err:
	print 'ERROR:', err

print
print 'Second attempt'
print json.dumps(data, skipkeys=True)

    此时不会产生一个异常，而是会忽略非串键。
处理定制类型
    目前为止，所有例子都使用 Python 的内置类型，因为这些类型得到了 json 的内置支持。通常还需要对定制类编码，有两种办法可以做到。
    给定以下需要编码的类：

class MyObj(object):
	def __init__(self, s):
		self.s = s
	def __repr__(self):
		return '<MyObj(%s)>' % self.s

    对 MyObj 实例编码的简单方法是定义一个函数，将未知类型转换为已知类型。这个函数并不需要具体完成编码，它只是将一个对象转换为另一个对象。

import json
import json_myobj

obj = json_myobj.MyObj('instance value goes here')

print 'First attempt'
try:
	print json.dumps(obj)
except (TypeError, ValueError), err:
	print 'ERROR:', err

def convert_to_builtin_type(obj):
	print 'default(', repr(obj), ')'
	# Convert objects to a dictionary of their representation
	d = { '__class__':obj.__class__.__name__,
	      '__module__':obj.__module__,
	      }
	d.update(obj.__dict__)
	return d

print
print 'With default'
print json.dumps(obj, default=convert_to_builtin_type)

    在 convert_to_builtin_type() 中，json 无法识别的类实例会转换为字典，其中包含足够的信息，如果程序可以访问所需的 Python 模块，则可以利用这些信息重新创建对象。
    要对结果解码并创建一个 MyObj() 实例，可以使用 loads() 的 object_hook 参数关联解码器，从而可以从模块导入这个类，并用于创建实例。
    对于从到来数据流解码的每个字典，都会调用 object_hook，这样就提供了一个机会，可以将字典转换为另外一种对象类型。hook 函数要返回调用应用所接收的对象而不是字典。

import json

def dict_to_object(d):
	if '__class__' in d:
		class_name = d.pop('__class__')
		module_name = d.pop('__module__')
		module = __import__(module_name)
		print 'MODULE:', module.__name__
		class_ = getattr(module, class_name)
		print 'CLASS:', class_
		args = dict( (key.encode('ascii'), value)
			         for key, value in d.items())
		print 'INSTANCE ARGS:', args
		inst = class_(**args)
	else:
		inst = d
	return inst

encode_object = '''
    [{"s": "instance value goes here",
      "__module__": "json_myobj", "__class__": "MyObj"}]
      '''
myobj_instance = json.loads(encode_object,
							object_hook=dict_to_object)
print myobj_instance

    由于 json 将串值转换为 unicode 对象，因此，用作类构造器的 keyword 参数之前，需要将它们重新编码为 ASCII 串。
    对于内置类型也有类似的 hook 函数，如整数（parse_int）、浮点数（parse_float）和常量（parse_constant）。
编码器和解码器类
    除了之前介绍的便利函数外，json 模块还提供了一些类来完成编码和解码。直接使用这些类可以访问另外的 API 来定制其行为。
    JSONEncoder 使用一个可迭代接口生成编码数据“块”，从而更容易写至文件或网络套接字，而不必在内存中表示完整的数据结构。

import json

encoder = json.JSONEncoder()
data = [ { 'a':'A', 'b':(2, 4), 'c':3.0 } ]

for part in encoder.iterencode(data):
	print 'PART:', part

    输出按逻辑单元生成，而不是根据某个大小值。
    encode() 方法基本上等价与表达式 ''.join(encoder.iterencode()) 生成的值，只不过之前会做一些额外的错误检查。
    要对任意的对象编码，需要用一个类似于 convert_to_builtin_type() 中的实现覆盖 default() 方法。

import json
import json_myobj

class MyEncoder(json.JSONEncoder):

	def default(self, obj):
		print 'default(', repr(obj), ')'
		# Convert objects to a dictionary of their representation
		d = { '__class__':obj.__class__.__name__,
		      '__module__':obj.__module__,
		      }
		d.update(obj.__dict__)
		return d

obj = json_myobj.MyObj('internal data')
print obj
print MyEncoder().encode(obj)

    输出与前一个实现的输出相同。
    这里要解码文本，然后将字典转换为一个对象，与前面的实现相比，还需要多做一些工作，不过不算太多。

import json

class MyDecoder(json.JSONDecoder):

	def __init__(self):
		json.JSONDecoder.__init__(self,
								  object_hook=self.dict_to_object)

	def dict_to_object(self, d):
		if '__class__' in d:
			class_name = d.pop('__class__')
			module_name = d.pop('__module__')
			module = __import__(module_name)
			print 'MODULE:', module.__name__
			class_ = getattr(module, class_name)
			print 'CLASS:', class_
			args = dict( (key.encode('ascii'), value)
				         for key, value in d.items())
			print 'INSTANCE ARGS:', args
			inst = class_(**args)
		else:
			inst = d
		return inst

encode_object = '''
    [{"s": "instance value goes here",
      "__module__": "json_myobj", "__class__": "MyObj"}]
      '''
myobj_instance = MyDecoder().decode(encode_object)
print myobj_instance

    输出与前面的例子相同。
处理流和文件
    到目前为止，所有例子都假设整个数据结构的编码版本可以一次完全放在内存中。对于很大的数据结构，更合适的做法可能是将编码直接写至一个类文件的对象。便利函数 load() 和 dump()  会接受一个类文件对象的引用，用于读写。

import json
from StringIO import StringIO

data = [ { 'a':'A', 'b':(2, 4), 'c':3.0 } ]

f = StringIO()
json.dump(data, f)

print f.getvalue()

    类似于这个例子中使用的 StringIO 缓冲区，也可以使用套接字或常规的文件句柄。
    尽管没有优化，即一次只读取数据的一部分，但 load() 函数还提供了一个好处，它封装了从流输入生成对象的逻辑。

import json
from StringIO import StringIO

f = StringIO('[{"a":"A", "b":[2, 4], "c":3.0}]')
print json.load(f)

    类似于 dump()，任何类文件对象都可以传递到 load()。
混合数据流
    JSONDecoder 包含一个 raw_decode() 方法，如果一个数据结构后面跟有更多数据，如带尾部文本的 JSON 数据，可以用这个方法完成解码。返回值是对输入数据解码创建的对象，以及该数据的一个索引（指示解码从哪里结束）。

import json

decoder = json.JSONDecoder()
def get_decoded_and_remainder(input_data):
	obj, end = decoder.raw_decode(input_data)
	remaining = input_data[end:]
	return (obj, end, remaining)

encoded_object = '[{"a": "A", "c": 3.0, "b": [2, 4]}]'
extra_text = 'This text is not JSON.'

print 'JSON first:'
data = ' '.join([encoded_object, extra_text])
obj, end, remaining = get_decoded_and_remainder(data)

print 'Object              :', obj
print 'End of parsed input :', end
print 'remaining text      :', repr(remaining)

print
print 'JSON embedded:'
try:
	data = ' '.join([extra_text, encoded_object, extra_text])
	obj, end, remaining = get_decoded_and_remainder(data)
except ValueError, err:
	print 'ERROR:', err

    遗憾的是，这种做法只适用于对象出现在输入起始位置的情况。
