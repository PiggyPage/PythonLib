[Python标准库]subprocess——创建附加进程
    作用：创建附加进程，并与之通信。
    Python 版本：2.4 及以后版本
    subprocess 模块提供了一种一致的方法来创建和处理附加进程。与标准库中的其他模块相比，它提供了一个更高级的接口，用以替换 os.system()、os.spawnv()、os 和 popen2 模块中的 popen() 函数，以及 commands()。为了更易于比较 subprocess 和其他模块，本节中的很多例子将重新创建 os 和 popen2 中使用的例子。
    subprocess 模块定义了一个类 Popen，还定义了使用这个类的一些包装器函数。Popen 的构造函数根据一些参数建立新进程，使父进程可以通过管道与之通信。相对于它替换的其他模块和函数，subprocess 能提供其全部功能，甚至更多。对于所有情况，这个 API 用法都一致，很多需要开销的额外步骤（如关闭额外的文件描述符，以及确保管道关闭）都已“内置”，而不需要由应用代码单独处理。
运行外部命令
    要运行一个外部命令，但不采用 os.system() 的方式与之交互，可以使用 call() 函数。

import subprocess

# Simple command
subprocess.call(['ls', '-l'])

    命令行参数作为一个字符串列表传入，这样就无须对引号或其他可能由 shell 解释的特殊字符转义。
    将 shell 参数设置为 true 值会使 subprocess 创建一个中间 shell 进程，由这个进程运行命令。默认情况下会直接运行命令。

import subprocess

# Command with shell expansion
subprocess.call('echo $HOME', shell=True)

    使用一个中间 shell 意味着在运行命令之前会先处理命令串中的变量、glob 模式以及其他特殊 shell 特性。
    1. 错误处理
    call() 的返回值是程序的退出码。调用者要负责解释这个返回值来检测错误。check_call() 函数的工作类似于 call()，只不过除了检查退出码外，如果指示发生了一个错误，则会产生一个 CalledProcessError 异常。

import subprocess

try:
    subprocess.check_call(['false'])
except subprocess.CalledProcessError as err:
    print 'ERROR:', err

    false 命令退出时总有一个非 0 的状态码，check_call() 会把它解释为一个错误。
    2. 捕获输出
    对于 call() 启动的进程，其标准输入和输出通道会绑定到父进程的输入和输出。这说明调用程序无法捕获命令的输出。可以使用 check_output() 捕获输出，以备以后处理。

import subprocess

output = subprocess.check_output(['ls', '-l'])
print 'Have %d bytes in output' % len(output)
print output

    ls -l 命令会成功运行，所以它打印到标准输出的文本会被捕获并返回。
    下一个例子在一个子 shell 中运行一系列命令。在命令返回一个错误码并退出之前，消息会发送到标准输出和标准错误输出。

import subprocess

try:
    output = subprocess.check_output(
        'echo to stdout; echo to stderr 1>&2; exit 1',
        shell=True
        )
except subprocess.CalledProcessError as err:
    print 'ERROR:', err
else:
    print 'Have %d bytes in output' % len(output)
    print output

    发送到标准错误输出的消息会打印到控制台，不过发送到标准输出的消息会隐藏。
    为了避免通过 check_output() 运行的命令将错误消息写至控制台，可以设置 stderr 参数为常量 STDOUT。

import subprocess

try:
    output = subprocess.check_output(
        'echo to stdout; echo to stderr 1>&2; exit 1',
        shell=True,
        stderr=subprocess.STDOUT,
        )
except subprocess.CalledProcessError as err:
    print 'ERROR:', err
else:
    print 'Have %d bytes in output' % len(output)
    print output

    现在错误和标准输出通道合并在一起，所以如果命令打印错误消息，它们会被捕获，而不会发送至控制台。
直接处理管道
    函数 call()、check_call() 和 check_output() 都是 Popen 类的包装器。直接使用 Popen 会对如何运行命令以及如何处理其输入和输出流有更多控制。例如，通过为 stdin、stdout 和 stderr 传递不同的参数，可以模仿 os.popen() 的不同变种。
    1. 与进程的单向通信
    要运行一个进程并读取它的所有输出，可以设置 stdout 值为 PIPE 并调用 communicate()。

import subprocess

print 'read:'
proc = subprocess.Popen(['echo', '"to stdout"'],
                        stdout=subprocess.PIPE,
                        )
stdout_value = proc.communicate()[0]
print '\tstdout:', repr(stdout_value)

    这与 popen() 的工作类似，只不过 Popen 实例会在内部管理数据读取。
    要建立一个管道，以便调用程序写数据，可以设置 stdin 为 PIPE。

import subprocess

print 'write:'
proc = subprocess.Popen(['cat', '-'],
                        stdin=subprocess.PIPE,
                        )
proc.communicate('\tstdin: to stdin\n')

    要将数据一次性发送到进程的标准输入通道，可以把数据传递到 communicate()。这与基于模式 'w' 使用 popen() 类似。
    2. 与进程的双向通信
    要建立 Popen 实例同时完成读写，可以结合使用前面几项技术。

import subprocess

print 'popen2:'

proc = subprocess.Popen(['cat', '-'],
                        stdin=subprocess.PIPE,
                        stdout=subprocess.PIPE,
                        )
msg = 'through stdin to stdout'
stdout_value = proc.communicate(msg)[0]
print '\tpass through:', repr(stdout_value)

    这会建立管道，类似于 popen2()。
    3. 捕获错误输出
    还可以监视 stdout 和 stderr 数据流，类似于 popen3()。

import subprocess

print 'popen3:'
proc = subprocess.Popen('cat  ; echo "to stderr" 1>&2',
                        shell=True,
                        stdin=subprocess.PIPE,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        )
msg = 'through stdin to stdout'
stdout_value, stderr_value = proc.communicate(msg)
print '\tpass through:', repr(stdout_value)
print '\tstderr      :', repr(stderr_value)

    从 stderr 读取数据与读取 stdout 是一样的。传入 PIPE 则告诉 Popen 关联到通道，communicate() 在返回之前会从这个通道读取所有数据。
    4. 结合常规和错误输出
    要把错误输出从进程定向到标准输出通道，stderr 要使用 STDOUT 而不是 PIPE。

import subprocess

print 'popen4:'
proc = subprocess.Popen('cat -; echo "to stderr" 1>&2',
                        shell=True,
                        stdin=subprocess.PIPE,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.STDOUT,
                        )
msg = 'through stdin to stdout'
stdout_value, stderr_value = proc.communicate(msg)
print '\combined output:', repr(stdout_value)
print '\tstderr value  :', repr(stderr_value)

    以这种方式结合输出类似于 popen4()。
连接管道段
    多个命令可以连接为一个管线（pipeline），这类似于 UNIX shell 的做法，即创建单独的 Popen 实例，把它们的输入和输出串链在一起。一个 Popen 实例的 stdout 属性用作管线中下一个 Popen 实例的 stdin 参数，而不是常量 PIPE。输出从管线中最后一个命令的 stdout 句柄读取。

import subprocess

cat = subprocess.Popen(['cat', 'index.rst'],
                        stdout=subprocess.PIPE,
                       )

grep = subprocess.Popen(['grep', '.. include::'],
                        stdin=cat.stdout,
                        stdout=subprocess.PIPE,
                       )

cut = subprocess.Popen(['cut', '-f', '3', '-d:'],
                        stdin=grep.stdout,
                        stdout=subprocess.PIPE,
                       )

end_of_pipe = cut.stdout
print 'Included files:'
for line in end_of_pipe:
    print '\t', line.strip()

    这个例子重新生成以下命令行。

cat index.rst | grep ".. include" | cut -f 3 -d:

    这个管线读取本节的 reStructureText 源文件，查找所有包含其他文件的文本行。然后打印出所包含的这些文件的文件名。
与其他命令交互
    前面的所有例子都假设交互量是有限的。communicate() 方法读取所有输出，返回之前要等待子进程退出。也可以在程序运行时从 Popen 实例使用的单个管道句柄增量地进行读写。这个技术可以用一个简单的应答程序来说明，这个程序从标准输入读，并写至标准输出。
    下一个例子中使用脚本 repeater.py 作为子进程。它从 stdin 读取，将值写至 stdout，一次处理一行，直到再没有更多输入。开始和停止时它还会向 stderr 写一个消息，显示子进程的生命期。

import sys

sys.stderr.write('repeater.py: starting\n')
sys.stderr.flush()

while True:
    next_line = sys.stdin.readline()
    if not next_line:
        break
    sys.stdout.write(next_line)
    sys.stdout.flush()

sys.stderr.write('repeater.py: exiting\n')
sys.stderr.flush()

    下一个交互例子将采用不同方式使用 Popen 实例的 stdin 和 stdout 文件句柄。在第一个例子中，将把一组 5 个数写至进程的 stdin，每写一个数就读回下一行输出。第二个例子中仍然写同样的 5 个数，但要使用 communicate() 一次读取全部输出。

import subprocess

print 'One line at a time:'
proc = subprocess.Popen('python repeater.py',
                        shell=True,
                        stdin=subprocess.PIPE,
                        stdout=subprocess.PIPE,
                        )
for i in range(5):
    proc.stdin.write('%d\n' % i)
    output = proc.stdout.readline()
    print output.rstrip()
remainder = proc.communicate()[0]
print remainder
print
print 'All output at once:'
proc = subprocess.Popen('python repeater.py',
                        shell=True,
                        stdin=subprocess.PIPE,
                        stdout=subprocess.PIPE,
                        )

for i in range(5):
    proc.stdin.write('%d\n' % i)

output = proc.communicate()[0]
print output

    对于这两种不同的循环，repeater.py: exiting 行出现在输出的不同位置上。
进程间传递信号
    os 模块的进程管理例子演示了如何使用 os.fork() 和 os.kill() 在进程间传递信号。由于每个 Popen 实例提供了一个 pid 属性，其中包含子进程的进程 id，所以可以完成类似于 subprocess 的工作。下一个例子结合了两个脚本。这个子进程为 USR 信号建立了一个处理程序。

import os
import signal
import time
import sys

pid = os.getpid()
received = False

def signal_usrl(signum, frame):
    "Callback invoked when a signal is received"
    global received
    received = True
    print 'CHILD %6s: Received USR1' % pid
    sys.stdout.flush()

print 'CHILD %6s: Setting up signal handler' % pid
sys.stdout.flush()
signal.signal(signal.SIGUSR1, signal_usrl)
print 'CHILD %6s: Pausing to wait for signal' % pid
sys.stdout.flush()
time.sleep(3)

if not received:
    print 'CHILD %6s: Never received signal' % pid

    这个脚本作为父进程运行。它启动 signal_child.py，然后发送 USR1 信号。

import os
import signal
import subprocess
import time
import sys

pid = os.getpid()
received = False

proc = subprocess.Popen(['python', 'signal_child.py'])
print 'PARENT      : Pausing before sending signal...'
sys.stdout.flush()
time.sleep(1)
print 'PARENT      : Signaling child'
sys.stdout.flush()
os.kill(proc.pid, signal.SIGUSR1)

    进程组/会话
    如果 Popen 创建的进程创建了子进程，这些子进程不会接收发送给父进程的信号。这说明，使用 Popen 的 shell 参数时，很难通过发送 SIGINT 或 SIGTERM 来终止在 shell 中启动的命令。

import os
import signal
import subprocess
import tempfile
import time
import sys

script = '''#!/bin/sh
echo "Shell script in process $$"
set -x
python signal_child.py
'''
script_file = tempfile.NamedTemporaryFile('wt')
script_file.write(script)
script_file.flush()

proc = subprocess.Popen(['sh', script_file.name], close_fds=True)
print 'PARENT      : Pausing before sending signaling %s...' % proc.pid
sys.stdout.flush()
time.sleep(1)
print 'PARENT      : Signaling child %s' % proc.pid
sys.stdout.flush()
os.kill(proc.pid, signal.SIGUSR1)
time.sleep(3)

    发送信号所用的 pid 与等待信号的 shell 脚本子进程的 pid 不匹配，因为在这个例子中，有 3 个不同的进程在交互。
    1. 程序 subprocess_signal_parent_shell.py
    2. shell 进程，它在运行主 Python 程序创建的脚本
    3. 程序 signal_child.py
    如果向子进程发送信号但不知道其进程 id，可以使用一个进程组（process group）关联这些子进程，使它们能一起收到信号。进程组用 os.setsid() 创建，将“会话 id”设置为当前进程的进程 id。所有子进程都会从其父进程继承会话 id，由于只能在由 Popen 及其子进程创建的 shell 中设置，所以不能在创建 Popen 的同一个进程中调用 os.setsid()。实际上，这个函数要作为 preexec_fn 参数传至 Popen，从而在 fork()  之后在新进程中运行这个函数，之后才能使用 exec() 运行 shell。要向整个进程组发送信号，可以提供 Popen 实例的 pid 值来使用 os.killpg()。

import os
import signal
import subprocess
import tempfile
import time
import sys

script = '''#!/bin/sh
echo "Shell script in process $$"
set -x
python signal_child.py
'''
script_file = tempfile.NamedTemporaryFile('wt')
script_file.write(script)
script_file.flush()

def show_setting_sid():
    print 'Calling os.setsid() from %s' % os.getpid()
    sys.stdout.flush()
    os.setsid()

proc = subprocess.Popen(['sh', script_file.name],
                        close_fds=True,
                        preexec_fn=show_setting_sid,
                        )
print 'PARENT      : Pausing before sending signaling %s...' % proc.pid
sys.stdout.flush()
time.sleep(1)
print 'PARENT      : Signaling child %s' % proc.pid
sys.stdout.flush()
os.kill(proc.pid, signal.SIGUSR1)
time.sleep(3)

    事件序列如下：
    1. 父程序实例化 Popen。
    2. Popen 实例创建一个新进程。
    3. 这个新进程运行 os.setsid()。
    4. 这个新进程运行 exec() 启动 shell。
    5. shell 运行 shell 脚本。
    6. shell 脚本再次创建新进程，该进程执行启动 Python。
    7. Python 运行 signal_child.py。
    8. 父进程使用 shell 的 pid 向进程组传送信号。
    9. shell 和 Python 进程接收到信号。
    10. shell 忽略这个信号。
    11. 运行 signal_child.py 的 Python 进程调用信号处理程序。
