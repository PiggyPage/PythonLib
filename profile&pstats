[Python标准库]profile 和 pstats——性能分析
    作用：Python 程序的性能分析。
    Python 版本：1.4 及以后版本
    profile 和 cProfile 模块提供了一些 API，用来收集和分析 Python 源代码消耗处理器资源的有关统计信息。
运行性能分析工具
    profile 模块中最基本的起点是 run()。它取一个字符串语句为参数，创建一个报告，指出运行这个语句时执行不同代码所花费的时间。

import profile

def fib(n):
	# from literateprograms.org
	# http://bit.ly/h1oQ5m
	if n == 0:
		return 0
	elif n == 1:
		return 1
	else:
		return fib(n-1) + fib(n-2)

def fib_seq(n):
	seq = [ ]
	if n > 0:
		seq.extend(fib_seq(n-1))
	seq.append(fib(n))
	return seq

profile.run('print fib_seq(20); print')

    这是一个递归版本的 Fibonacci 序列计算器，对于展示 profile 尤其有用，因为其性能可以显著改善。标准报告格式会显示一个总结，然后是给出执行的各个函数的详细信息。

$ python test.py
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]

         57356 function calls (66 primitive calls) in 0.372 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
       21    0.000    0.000    0.000    0.000 :0(append)
       20    0.000    0.000    0.000    0.000 :0(extend)
        1    0.000    0.000    0.000    0.000 :0(setprofile)
        1    0.000    0.000    0.372    0.372 <string>:1(<module>)
        1    0.000    0.000    0.372    0.372 profile:0(print fib_seq(20); print)
        0    0.000             0.000          profile:0(profiler)
     21/1    0.000    0.000    0.372    0.372 test.py:13(fib_seq)
 57291/21    0.372    0.000    0.372    0.018 test.py:3(fib)

    原始版本有 57356 个不同的函数调用，运行时间为 0.372 秒。实际上这里有 66 个基本调用，这个事实说明这 57000 多个调用中大部分都是递归调用。列表中所用时间的详细信息按函数分解，显示了调用数、函数花费的总时间，每个调用花费的时间（tottime/ncalls），一个函数花费的累积时间，以及累积时间与基本调用之比。
    并不奇怪，这里大部分时间都花费在反复调用 fib() 上。添加一个 memoize 修饰符可以减少递归调用数，会对这个函数的性能有很大影响。

import profile

class memoize:
	# from Avinash Vora's memoize decorator
	# http://bit.ly/fGzfR7
	def __init__(self, function):
		self.function = function
		self.memoized = {}

	def __call__(self, *args):
		try:
			return self.memoized[args]
		except KeyError:
			self.memoized[args] = self.function(*args)
			return self.memoized[args]

@memoize
def fib(n):
	# from literateprograms.org
	# http://bit.ly/h1oQ5m
	if n == 0:
		return 0
	elif n == 1:
		return 1
	else:
		return fib(n-1) + fib(n-2)

def fib_seq(n):
	seq = [ ]
	if n > 0:
		seq.extend(fib_seq(n-1))
	seq.append(fib(n))
	return seq

if __name__ == '__main__':
	profile.run('print fib_seq(20); print')

    通过记住各层的 Fibonacci 值，大多数调用都可以避免，将运行的调用减至 145 个，这只需要 0.000 秒。fib() 的 ncalls 数显示出它完全没有递归。

$ python test.py
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]

         145 function calls (87 primitive calls) in 0.000 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
       21    0.000    0.000    0.000    0.000 :0(append)
       20    0.000    0.000    0.000    0.000 :0(extend)
        1    0.000    0.000    0.000    0.000 :0(setprofile)
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 profile:0(print fib_seq(20); print)
        0    0.000             0.000          profile:0(profiler)
    59/21    0.000    0.000    0.000    0.000 test.py:10(__call__)
       21    0.000    0.000    0.000    0.000 test.py:17(fib)
     21/1    0.000    0.000    0.000    0.000 test.py:28(fib_seq)

在上下文中运行
    有时，不用为 run() 构造复杂表达式，更容易的做法是构建一个简单的表达式，并使用 runctx() 通过一个上下文为它传递参数。

profile.runctx('print fib_seq(n); print', globals(), {'n':20})

    n 的值通过局部变量上下文传递，而不是直接嵌入到传至 runctx() 的语句中。

$ python test.py
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]

         145 function calls (87 primitive calls) in 0.000 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
       21    0.000    0.000    0.000    0.000 :0(append)
       20    0.000    0.000    0.000    0.000 :0(extend)
        1    0.000    0.000    0.000    0.000 :0(setprofile)
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 profile:0(print fib_seq(n); print)
        0    0.000             0.000          profile:0(profiler)
    59/21    0.000    0.000    0.000    0.000 test.py:10(__call__)
       21    0.000    0.000    0.000    0.000 test.py:17(fib)
     21/1    0.000    0.000    0.000    0.000 test.py:28(fib_seq)

pstats：保存和处理统计信息
    profile 函数创建的标准报告不太灵活。不过，可以保存 run() 和 runctx() 的原始性能数据并用 pstats.Stats 类单独处理，来生成定制报告。
    下面的例子多次迭代运行同一个测试，并合并结果。

import cProfile as profile
import pstats
from profile_fibonacci_memoized import fib, fib_seq

# Create 5 set of stats
filename = []
for i in range(5):
	filename = 'profile_stats_%d.stats' % i
	profile.run('print %d, fib_seq(20)' % i, filename)

# Read all 5 stats files into a single object
stats = pstats.Stats('profile_stats_0.stats')
for i in range(1, 5):
	stats.add('profile_stats_%d.stats' % i)

# Clean up filename for the report
stats.strip_dirs()

# Sort the statistics by the cumulative time spent in the function
stats.sort_stats('cumulative')

stats.print_stats()

    输出报告按函数所花费累积时间的降序排序，另外打印的文件名中去掉了目录名，以节省页面上的水平空间。

$ python test.py
0 [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
1 [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
2 [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
3 [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
4 [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
Sun Jul 10 20:25:40 2016    profile_stats_0.stats
Sun Jul 10 20:25:40 2016    profile_stats_1.stats
Sun Jul 10 20:25:40 2016    profile_stats_2.stats
Sun Jul 10 20:25:40 2016    profile_stats_3.stats
Sun Jul 10 20:25:40 2016    profile_stats_4.stats

         484 function calls (346 primitive calls) in 0.002 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        5    0.000    0.000    0.002    0.000 <string>:1(<module>)
    105/5    0.001    0.000    0.002    0.000 profile_fibonacci_memoized.py:28(fib_seq)
  143/105    0.000    0.000    0.000    0.000 profile_fibonacci_memoized.py:10(__call__)
       21    0.000    0.000    0.000    0.000 profile_fibonacci_memoized.py:17(fib)
      100    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}
      105    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
        5    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}

限制报告内容
    可以由函数限制输出。下面这个版本只显示 fib() 和 fib_seq() 性能的有关信息，这里使用一个正则表达式来匹配所需的 filename:lineno(function) 值。

import profile
import pstats
from profile_fibonacci_memoized import fib, fib_seq

# Read all 5 stats files into a single object
stats = pstats.Stats('profile_stats_0.stats')
for i in range(1, 5):
	stats.add('profile_stats_%d.stats' % i)
stats.strip_dirs()
stats.sort_stats('cumulative')

# limit output to lines with "(fib" in them
stats.print_stats('\(fib')

    正则表达式包含一个字面量（左括号 [(]），来匹配位置值的函数名部分。

$ python test.py
Sun Jul 10 20:25:40 2016    profile_stats_0.stats
Sun Jul 10 20:25:40 2016    profile_stats_1.stats
Sun Jul 10 20:25:40 2016    profile_stats_2.stats
Sun Jul 10 20:25:40 2016    profile_stats_3.stats
Sun Jul 10 20:25:40 2016    profile_stats_4.stats

         484 function calls (346 primitive calls) in 0.002 seconds

   Ordered by: cumulative time
   List reduced from 7 to 2 due to restriction <'\\(fib'>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    105/5    0.001    0.000    0.002    0.000 profile_fibonacci_memoized.py:28(fib_seq)
       21    0.000    0.000    0.000    0.000 profile_fibonacci_memoized.py:17(fib)

调用图
    Stats 还包括一些方法来打印函数的调用者和被调用者。

import cProfile as profile
import pstats
from profile_fibonacci_memoized import fib, fib_seq

# Read all 5 stats files into a single object
stats = pstats.Stats('profile_stats_0.stats')
for i in range(1, 5):
	stats.add('profile_stats_%d.stats' % i)
stats.strip_dirs()
stats.sort_stats('cumulative')

print 'INCOMING CALLERS:'
stats.print_callers('\(fib')

print 'OUTGOING CALLEES:'
stats.print_callees('\(fib')

    print_callers() 和 print_callees() 的参数与 print_stats() 的限制参数类似。输出会显示调用者、被调用者、调用数以及累积时间。

$ python test.py
INCOMING CALLERS:
   Ordered by: cumulative time
   List reduced from 7 to 2 due to restriction <'\\(fib'>

Function                                   was called by...
                                               ncalls  tottime  cumtime
profile_fibonacci_memoized.py:28(fib_seq)  <-       5    0.000    0.002  <string>:1(<module>)
                                                100/5    0.001    0.002  profile_fibonacci_memoized.py:28(fib_seq)
profile_fibonacci_memoized.py:17(fib)      <-      21    0.000    0.000  profile_fibonacci_memoized.py:10(__call__)


OUTGOING CALLEES:
   Ordered by: cumulative time
   List reduced from 7 to 2 due to restriction <'\\(fib'>

Function                                   called...
                                               ncalls  tottime  cumtime
profile_fibonacci_memoized.py:28(fib_seq)  ->     105    0.000    0.000  profile_fibonacci_memoized.py:10(__call__)
                                                100/5    0.001    0.002  profile_fibonacci_memoized.py:28(fib_seq)
                                                  105    0.000    0.000  {method 'append' of 'list' objects}
                                                  100    0.000    0.000  {method 'extend' of 'list' objects}
profile_fibonacci_memoized.py:17(fib)      ->      38    0.000    0.000  profile_fibonacci_memoized.py:10(__call__)
