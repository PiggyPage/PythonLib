[Python标准库]linecache——高效读取文本文件
    作用：从文件或导入的 Python 模块获取文本行，维护一个结果缓存，从而可以更高效地从相同文件读取多行文本。
    Python 版本：1.4 及以后版本
    处理 Python 源文件时，linecache 模块会在 Python 标准库的其他部分中用到。缓存实现将在内存中保存文件的内容（解析为单独的行）。API 通过索引一个 list 返回所请求的行，与反复地读取文件并解析文本来查找所需文本行相比，这样可以节省时间。这个方法在查找同一文件中的多行时尤其有用，比如为一个错误报告生成一个跟踪记录（traceback）。
测试数据
    后面将使用由一个 Lorem Ipsum 生成器生成的以下文本作为示例输入。

import os
import tempfile

lorem = """Lorem ipsum dolor sit amet, consectetuer
adipiscing elit.  Vivamus eget elit. In posuere mi non
risus. Mauris id quam posuere lectus sollicitudin
varius. Praesent at mi. Nunc eu velit. Sed augue massa,
fermentum id, nonummy a, nonummy sit amet, ligula. Curabitur
eros pede, egestas at, ultricies ac, apellentesque eu,
tellus.

Sed sed odio sed mi luctus mollis. Integer et nulla ac augue
convallis accumsan. Ut felis. Donec lectus sapien, elementum
nec, condimentum ac, interdum non, tellus. Aenean viverra,
mauris vehicula semper porttitor, ipsum odio consectetuer
lorem, ac imperdiet eros odio a sapien. Nulla mauris tellus,
aliquam non, egestas a, nonummy et, erat. Vivamus sagittis
porttitor eros."""

def make_tempfile():
    fd, temp_file_name = tempfile.mkstemp()
    os.close(fd)
    f = open(temp_file_name, 'wt')
    try:
        f.write(lorem)
    finally:
        f.close()
    return temp_file_name

def cleanup(filename):
    os.unlink(filename)

读取特定行
    linecache 模块读取的文件行号从 1 开始，不过通常列表的数组索引会从 0 开始。

import linecache
from linecache_data import *

filename = make_tempfile()

# Pick out the same line from source and cache.
# (Notice that linecache counts form 1)
print 'SOURCE:'
print '%r' % lorem.split('\n')[4]
print
print 'CACHE:'
print '%r' % linecache.getline(filename, 5)

cleanup(filename)

    返回的各行包括一个末尾的换行符。
处理空行
    返回值通常在行末尾都包含一个换行符，所以如果文本行为空，那么返回值就是一个换行符。

import linecache
from linecache_data import *

filename = make_tempfile()

# Blank lines include the newline
print 'BLANK : %r' % linecache.getline(filename, 8)

cleanup(filename)

    输入文件的第 8 行没有包含任何文本。
错误处理
    如果所请求的行号超出了文件中合法行号的范围，getline() 会返回一个空串。

import linecache
from linecache_data import *

filename = make_tempfile()

# The cache always returns a string, and uses
# an empty string to indicate a line which does
# not exist.
not_there = linecache.getline(filename, 500)
print 'NOT THERE: %r includes %d characters' % \
      (not_there, len(not_there))

cleanup(filename)

    输入文件只有 12 行，所以请求第 500 行就像是试图越过文件末尾继续读文件。
    输入一个不存在的文件时，也采用同样的方式处理。

import linecache

# Errors are even hidden if linecache cannot find the file
no_such_file = linecache.getline('this_file_does_not_exist.txt', 1)
print 'NO FILE: %r' % no_such_file

    调用者试图读取数据时，这个模块不会产生异常。
读取 Python 源文件
    由于 linecache 在生成 traceback 跟踪记录时使用相当频繁，其关键特性之一就是能够通过指定模板的基名在导入路径中查找 Python 源模块。

import linecache
import os

# Look for the linecache module, using
# the built in sys.path search.
module_line = linecache.getline('linecache.py', 3)
print 'MODULE:'
print repr(module_line)

# Look at the linecache module source directly.
file_src = linecache.__file__
if file_src.endswith('.pyc'):
    file_src = file_src[:-1]
print '\nFILE:'
with open(file_src, 'r') as f:
    file_line = f.readlines()[2]
print repr(file_line)

    如果 linecache 中的缓存填充代码在当前目录中无法找到指定名的文件，它会在 sys.path 中搜索指定名的模块。这个例子要查找 linecache.py。由于当前目录中没有这个文件副本，所以会找到标准库中的相应文件。