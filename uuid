[Python标准库]uuid——全局唯一标识符
    作用：uuid 模块实现了全局唯一标识符，如 RFC 4122 所述。
    Python 版本：2.5 及以后版本
    RFC 4122 定义了一个系统，可以为资源创建全局唯一标识符（Universally Unique Identifier），这里采用一种不需要集中注册机的方式。UUID 值为 128 位，正如参考指南所述，“UUID 可以保证跨空间和时间的唯一性”。它们对于为文档、主机、应用客户以及其他需要唯一值的情况生成标识符很有用。RFC 特别强调创建一个统一资源名（Uniform Resource Name）命名空间，并涵盖了 3 个主要算法。
    使用 IEEE 802 MAC 地址作为唯一性来源
    使用伪随机数
    使用公开的串并结合密码散列
    在上述所有情况下，种子值都要与系统时钟结合，如果向后设置时钟，则要用一个时钟序列值维护唯一性。
UUID 1——IEEE 802 MAC 地址
    UUID 1 值使用主机的 MAC 地址计算。uuid 模块使用 getnode() 来获取当前系统的 MAC 值。

import uuid

print hex(uuid.getnode())

    如果一个系统有多个网卡，相应的有多个 MAC 地址，可能返回其中任意一个值。
    要为一个主机生成一个 UUID，由其 MAC 地址标识，需要使用 uuid1() 函数。节点标识符参数是可选的；如果未设置这个域，就会使用 getnode() 返回的值。

import uuid

u = uuid.uuid1()

print u
print type(u)
print 'bytes   :', repr(u.bytes)
print 'hex     :', u.hex
print 'int     :', u.int
print 'urn     :', u.urn
print 'variant :', u.variant
print 'version :', u.version
print 'fields  :', u.fields
print '\ttime_low            :', u.time_low
print '\ttime_mid            :', u.time_mid
print '\ttime_hi_version     :', u.time_hi_version
print '\tclock_seq_hi_variant:', u.clock_seq_hi_variant
print '\tclock_seq_low       :', u.clock_seq_low
print '\tnode                :', u.node
print '\ttime                :', u.time
print '\tclock_seq           :', u.clock_seq

    对于返回 UUID 对象，它的各个部分可以通过只读的实例属性访问。有些属性，如 hex、int 和 urn，则是 UUID 值的不同表示。
    由于有时间分量（time），每次调用 uuid1() 都会返回一个新值。

import uuid

for i in xrange(3):
	print uuid.uuid1()

    在这个输出中，只有时间分量（串的开始位置）有变化。
    由于每个计算机有一个不同的 MAC 地址，在不同系统上运行这个示例程序会产生完全不同的值。这个例子传递不同的节点 id 来模拟在不同主机上运行。

import uuid

for node in [ 0x1ec200d9e0, 0x1e5274040e ]:
	print uuid.uuid1(node), hex(node)

    除了时间值不同外，UUID 末尾的节点标识符也有变化。
UUID 3 和 5——基于名字的值
    有些情况下可能需要根据名字创建 UUID 值，而不是根据随机值或基于时间的值来创建。UUID 3 和 5 规范使用密码散列值（分别使用 MD5 或 SHA1），将特定于命名空间的种子值与名字相结合。有一些公开的命名空间，由预定义的 UUID 值标识，分别用于处理 DNS、URL、IOS OID 和 X.500 识别名（Distinguished Names）。通过生成和保存 UUID 值，还可以定义新的特定于应用的命名空间。

import uuid

hostname = ['www.doughellmann.com', 'blog.doughellmann.com']

for name in hostname:
	print name
	print '  MD5   :', uuid.uuid3(uuid.NAMESPACE_DNS, name)
	print '  SHA-1 :', uuid.uuid5(uuid.NAMESPACE_DNS, name)
	print

    要从一个 DNS 名创建 UUID，将 uuid.NAMESPACE_DNS 作为命名空间参数传入 uuid3() 或 uuid5()。
    一个命名空间中给定的 UUID 值总是相同的，而不论在何时或何地计算。

import uuid

namespace_types = sorted(n
	for n in dir(uuid)
	if n.startswith('NAMESPACE_')
	)
name = 'www.doughellmann.com'

for namespace_type in namespace_types:
	print namespace_type
	namespace_uuid = getattr(uuid, namespace_type)
	print ' ', uuid.uuid3(namespace_uuid, name)
	print ' ', uuid.uuid3(namespace_uuid, name)
	print

    但是命名空间中相同名的 UUID 值则是不同的。
UUID 4——随机值
    有时，基于主机和基于命名空间的 UUID 值“差别还不够大”。例如，如果 UUID 要用作散列键，则需要有区分度更大、更随机的值序列来避免散列表中出现冲突。通过让值有更少的共同数字，也能更容易地在日志文件中查找这些值。为了增加 UUID 的区分度，可以通过 uuid4() 用随机的输入值来生成。

import uuid

for i in xrange(3):
	print uuid.uuid4()

    随机性的来源取决于导入 uuid 时哪些 C 库可用。如果可以加载 libuuid（或 uuid.dll），而且其中包含一个生成随机值的函数，则使用这个库。否则，使用 os.urandom() 或 random 模块。
处理 UUID 对象
    除了生成新的 UUID 值，还可以解析标准格式的串来创建 UUID 对象，使比较和排序操作的处理更为容易。

import uuid

def show(msg, l):
	print msg
	for v in l:
		print ' ', v
	print

input_values = [
    'urn:uuid:f2f84497-b3bf-493a-bba9-7c68e6def80b',
    '{417a5ebb-01f7-4ed5-aeac-3d56cd5037b0}',
    '2115773a-5bf1-11dd-ab48-001ec200d9e0',
    ]

show('input_values', input_values)

uuids = [ uuid.UUID(s) for s in input_values ]
show('converted to uuids', uuids)

uuids.sort()
show('sorted', uuids)

    将外围大括号从输入中去除，另外将短横线（-）也去除。如果串有一个包含 urn: 或 uuid: 的前缀，也会将其删除。剩下的文本必然是十六进制数构成的串，然后再将它解释为一个 UUID 值。
