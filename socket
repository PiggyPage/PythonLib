[Python标准库]socket——网络通信
    作用：提供对网络通信的访问。
    Python 版本：1.4 及以后版本
    socket 模块提供了一个底层 C API，可以使用 BSD 套接字接口实现网络通信。它包括 socket 类，用于处理具体的数据通道，还包括用于完成网络相关任务的函数，如将一个服务器名称转换为一个地址，以及格式化数据以便在网络上发送。
寻址、协议簇和套接字类型
    套接字（socket）是程序在本地或者通过互联网来回传递数据时所用通信通道的一个端点。套接字有两个主要属性来控制如何发送数据：地址簇（address family）控制所用的 OSI 网络层协议，套接字类型（socket type）控制传输层协议。
    Python 支持 3 个地址簇。最常用的是 AF_INET，用于 IPv4 Internet 寻址。IPv4 地址长度为 4 个字节，通常表示为 4 个数的序列，每个字节对应一个数，用点号分隔（如 10.1.1.5 和 127.0.0.1）。这些值通常称为“IP 地址”。目前几乎所有互联网网络应用都使用 IPv4。
    AF_INET6 用于 IPv6 Internet 寻址。IPv6 是“下一代” Internet 协议。它支持 128 位地址和通信流调整，还支持 IPv4 所不支持的一些路由特性。目前采用 IPv6 的应用还很有限，不过在不断增长。
    AF_UNIX 是 UNIX 域套接字（UNIX Domain Sockets, UDS）的地址簇，这是一种 POSIX 兼容系统上的进程间通信协议。UDS 的实现通常允许操作系统直接从进程向进程传递数据，而不用通过网络栈。这比使用 AF_INET 更高效，但是由于要用文件系统作为寻址的命名空间，UDS 仅限于同一个系统上的进程。相比其他的 IPC 机制（如命名管道或共享内存），使用 UDS 的优势在于，它与 IP 网络应用的编程接口是一样的。这说明，应用在单个主机上运行时可以利用高效的通信，在网络上发送数据时仍然可以使用同样的代码。
    套接字类型往往是 SOCK_DGRAM 或 SOCK_STREAM，SOCK_DGRAM 对应用户数据报协议（user datagram protocol, UDP），SOCK_STREAM 对应传输控制协议（transmission control protocol, TCP）。UDP 不需要传输握手过程或其他设置过程（setup），但是提供的传输可靠性较低。UDP 消息可能乱序传送，也可能传送多次，或者根本不传送。TCP 则相反，可以确保每个消息只传送一次，而且按正确地顺序传送。不过，由于增加了可靠性，可能会引入额外的延迟，因为数据包可能需要重新传输。大多数传送大量数据的应用协议（如 HTTP）都建立在 TCP 基础上。UDP 通常用于顺序不太重要的协议（因为消息可以放在一个数据包中，例如 DNS），或者用于广播（向多个主机发送相同的数据）。
    1. 在网络上查找主机
    socket 包含一些函数与网络上的域名服务交互，使得程序可以将服务器的主机名转换为其数字网络地址。应用使用地址来连接一个服务器之前并不需要显式地转换地址，不过报告错误时除了报告所用的名字之外，还包含这个数字地址会很有用。
    要查找当前主机的正式名字，可以使用 gethostname()。

import socket

print socket.gethostname()

    所返回的名字取决于当前系统的网络设置，在不同的网络上返回的名字可能有变化（如一个连接到 WLAN 的笔记本电脑）。
    这里使用 gethostname() 访问操作系统主机名解析 API，将服务器名字转换为其数字地址。

import socket

for host in [ 'homer', 'www', 'www.python.org', 'nonsuchname' ]:
    try:
        print '%s : %s' % (host, socket.gethostbyname(host))
    except socket.error, msg:
        print '%s : %s' % (host, msg)

    如果当前系统的 DNS 配置在搜索中包括一个或多个域，名字（name）参数不要求是完全限定名（也就是说，不需要包含域名以及基名）。如果一个名字无法找到，会产生一个 socket error 类型的异常。
    要访问有关服务器的更多命名信息，可以使用函数 gethostbyname_ex()。它会返回服务器的标准主机名、所有别名，以及可以用来到达这个主机的所有可用 IP 地址。

import socket

for host in [ 'homer', 'www', 'www.python.org', 'nonsuchname' ]:
    print host
    try:
        hostname, aliases, addresses = socket.gethostbyname_ex(host)
        print '  Hostname:', hostname
        print '  Aliases :', aliases
        print ' Addresses:', addresses
    except socket.error as msg:
        print 'ERROR:', msg
    print

    如果能得到一个服务器的所有已知 IP 地址，客户就可以实现其自己的负载平衡或故障恢复算法。
    使用 getfqdn() 可以将一个部分名转换为完全限定域名。

import socket

for host in [ 'homer', 'www', 'www.python.org', 'nonsuchname' ]:
    print '%6s : %s' % (host, socket.getfqdn(host))

    如果输入是一个别名（如这里的 www），返回的名字不一定与输入参数一致。
    如果得到一个服务器的地址，可以使用 gethostbyaddr() 完成一个“逆向”查找来得到主机名。

import socket

hostname, aliases, addresses = socket.gethostbyaddr('127.0.0.1')

print 'Hostname :', hostname
print 'Aliases  :', aliases
print 'Addresses:', addresses

    返回值是一个元组，其中包括完全主机名、所有别名，以及与这个名字关联的所有 IP 地址。
    2. 查找服务信息
    除了 IP 地址之外，每个套接字地址还包括一个整数端口号（port number）。很多应用可以在同一个端口上运行并监听一个 IP 地址，不过一次只有一个套接字可以使用该地址的端口。通过结合 IP 地址、协议和端口号，可以唯一地标识一个通信通道，确保通过一个套接字发送的消息可以到达正确的目标。
    有些端口号已经预先分配给某个特定协议。例如，使用 SMTP 的 email 服务器使用 TCP 在端口 25 相互通信，Web 客户和服务器使用 80 作为 HTTP 的端口号。网络服务的端口号和标准名可以使用 getservbyname() 查找。

import socket
from urlparse import urlparse

for url in [ 'http://www.python.org',
             'https://www.mybank.com',
             'ftp://prep.ai.mit.edu',
             'gopher://gopher.micro.umn.edu',
             'smtp://mail.example.com',
             'imaps://mail.example.com',
             'pop3://pop.example.com',
             'pop3s://pop.example.com',
             ]:
    parsed_url = urlparse(url)
    port = socket.getservbyname(parsed_url.scheme)
    print '%6s : %s' % (parsed_url.scheme, port)

    尽管标准化服务不太可能改变端口，不过最好用一个系统调用查找端口值，而不是在程序中硬编码写出端口号，这样在增加新服务时会更为灵活。
    要逆向完成服务端口查找，可以使用 getservbyport()。

import socket
import urlparse

for port in [ 80, 443, 21, 70, 25, 143, 993, 110, 995 ]:
    print urlparse.urlunparse(
        (socket.getservbyport(port), 'example.com', '/', '', '', '')
        )

    要从任意的地址构造服务 URL，这个逆向查找就很有用。
    可以使用 getprotobyname() 获取分配给一个传输协议的端口号。

import socket

def get_constants(prefix):
    """Create a dictionary mapping socket module
    constants to their names.
    """
    return dict( (getattr(socket, n), n)
                 for n in dir(socket)
                 if n.startswith(prefix)
                 )

protocols = get_constants('IPPROTO_')
for name in [ 'icmp', 'udp', 'tcp' ]:
    proto_num = socket.getprotobyname(name)
    const_name = protocols[proto_num]
    print '%4s -> %2d (socket.%-12s = %2d)' % \
          (name, proto_num, const_name, getattr(socket, const_name))

    协议码值是标准化的，作为常量在 socket 中定义，这些协议码都有前缀 IPPROTO_。
    3. 查找服务器地址
    getaddrinfo() 将一个服务器的基本地址转换为一个元组列表，其中包含建立一个连接所需的全部信息。每个元组的内容会有变化，包含不同的网络簇或协议。

import socket

def get_constants(prefix):
    """Create a dictionary mapping socket module
    constants to their names.
    """
    return dict( (getattr(socket, n), n)
                 for n in dir(socket)
                 if n.startswith(prefix)
                 )

families = get_constants('AF_')
types = get_constants('SOCK_')
protocols = get_constants('IPPROTO_')

for response in socket.getaddrinfo('www.python.org', 'http'):

    # Unpack the response tuple
    familiy, socktype, proto, canonname, sockaddr = response

    print 'Family        :', families[familiy]
    print 'Type          :', types[socktype]
    print 'Protocol      :', protocols[proto]
    print 'Canonical name:', canonname
    print 'Socket address:', sockaddr
    print

    这个程序展示了如何查找 www.python.org 的连接信息。
    getaddrinfo() 有多个参数来过滤结果列表。例子中给出的主机（host）和端口（port）值是必要参数。可选参数包括 familiy、socktype、proto 和 flags。这些可选值可以取 0 或 socket 定义的某个常量。

import socket

def get_constants(prefix):
    """Create a dictionary mapping socket module
    constants to their names.
    """
    return dict( (getattr(socket, n), n)
                 for n in dir(socket)
                 if n.startswith(prefix)
                 )

families = get_constants('AF_')
types = get_constants('SOCK_')
protocols = get_constants('IPPROTO_')

for response in socket.getaddrinfo('www.doughellmann.com', 'http',
                                   socket.AF_INET,      # familiy
                                   socket.SOCK_STREAM,  # socktyoe
                                   socket.IPPROTO_TCP,  # protocol
                                   socket.AI_CANONNAME, # flags
                                   ):

    # Unpack the response tuple
    familiy, socktype, proto, canonname, sockaddr = response

    print 'Family        :', families[familiy]
    print 'Type          :', types[socktype]
    print 'Protocol      :', protocols[proto]
    print 'Canonical name:', canonname
    print 'Socket address:', sockaddr
    print

    这一次由于标志（flags）包括 AI_CANONNAME，如果这个主机有别名，结果中会包含服务器的标准名（可能与查找所用的值不同）。如果没有这个标志，标准名值仍为空。
    4. IP 地址表示
    用 C 编写的网络程序使用数据类型 struct sockaddr 将 IP 地址表示为二进制值（而不是 Python 程序中常见的地址）。要在 Python 表示和 C 表示之间转换 IPv4 地址，可以使用 inet_aton() 和 inet_ntoa()。

import binascii
import socket
import struct
import sys

for string_address in [ '192.168.1.1', '127.0.0.1' ]:
    packed = socket.inet_aton(string_address)
    print 'Original:', string_address
    print 'Packed  :', binascii.hexlify(packed)
    print 'Unpacked:', socket.inet_ntoa(packed)
    print

    数据包格式中的 4 个字可以传递到 C 库、通过网络安全地传输，或者紧凑地保存在一个数据库。
    相关函数 inet_pton() 和 inet_ntop() 都能处理 IPv4 和 IPv6 地址，根据传入的地址簇参数生成适当的格式。

import binascii
import socket
import struct
import sys

string_address = '2002:ac10:10a:1234:21e:52ff:fe74:40e'
packed = socket.inet_pton(socket.AF_INET6, string_address)

print 'Original:', string_address
print 'Packed  :', binascii.hexlify(packed)
print 'Unpacked:', socket.inet_ntop(socket.AF_INET6, packed)

    IPv4 地址已经是十六进制值，所以将打包版本转换为一个十六进制数系列时会生成一个与原值类似的串。
TCP/IP 客户和服务器
    套接字可以配置为一个服务器，监听到来的消息，或者也可以配置为客户，连接到其他应用。TCP/IP 套接字的两段连接后，可以完成双向通信。
    1. 回应服务器
    下面这个示例程序以标准库文档中的一个例子为基础，它接收到来的消息，再回复给发送者。首先创建一个 TCP/IP 套接字。

import socket
import sys

# Create a TCP/IP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    然后使用 bind() 将这个套接字与服务器地址关联。在这里，地址是 localhost（指示当前服务器），端口号为 10000。

# Bind the socket to the port
server_address = ('localhost', 10000)
print >>sys.stderr, 'starting up on %s port %s' % server_address
sock.bind(server_address)

    调用 listen() 将这个套接字置为服务器模式，调用 accept() 等待到来的连接。整数参数是在后台排队的连接数，达到这个连接数后，系统会拒绝连接新客户。这个例子希望一次只处理一个连接。

# Listen for incoming connections
sock.listen(1)

while True:
    # Wait for a connection
    print >>sys.stderr, 'waiting for a connection'
    connection, client_address = sock.accept()

    accept() 返回服务器和客户之间的一个打开的连接，并返回客户地址。这个连接实际上是另一个端口上的一个不同的套接字（由内核分配）。数据使用 recv() 从连接读取，并用 sendall() 传输。

    try:
        print >>sys.stderr, 'connection from', client_address

        # Receive the data in small chunks and retransmit it
        while True:
            data = connection.recv(16)
            print >>sys.stderr, 'received "%s"' % data
            if data:
                print >>sys.stderr, 'sending data back to the client'
                connection.sendall(data)
            else:
                print >>sys.stderr, 'no data from', client_address
                break

    finally:
        # Clean up the connection
        connection.close()

    与一个客户的通信完成时，需要用 close() 清理这个连接。这个例子使用了一个 try:finally 块来确保 close() 总会被调用，即使出现了一个错误也不例外。
    2. 回应客户
    与服务器不同，客户程序采用另外一种方式建立 socket。它不绑定到一个端口并监听，而是使用 connect() 将套接字直接关联到远程地址。

import socket
import sys

# Create a TCP/IP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Connect the socket to the port where the server is listening
server_address = ('localhost', 10000)
print >>sys.stderr, 'connecting to %s port %s' % server_address
sock.connect(server_address)

    建立连接之后，可以通过 socket 利用 sendall() 发送数据，并用 recv() 接收数据，这与服务器中是一样的。

try:
    # Send data
    message = 'This is the message.  It will be repeated.'
    print >>sys.stderr, 'sending "%s"' % message
    sock.sendall(message)

    # Look for the response
    amout_received = 0
    amout_expected = len(message)

    while amout_received < amout_expected:
        data = sock.recv(16)
        amout_received += len(data)
        print >>sys.stderr, 'received "%s"' % data

finally:
    print >>sys.stderr, 'closing socket'
    sock.close()

    发送了整个消息并接收到一个副本时，套接字会关闭，以释放端口。
    3. 客户与服务器
    要在不同的终端窗口运行客户和服务器，使它们能够相互通信。服务器输出显示了到来的连接和数据，以及发回给客户的响应。客户输出显示了发出的消息和来自服务器的响应。
    4. 简易客户连接
    如果使用便利函数 create_connection() 来连接服务器，TCP/IP 客户可以省去几步。这个函数只有一个参数，这是一个包含服务器地址的二值元组，函数将由这个参数推导出用于连接的最佳地址。

import socket
import sys

def get_constants(prefix):
    """Create a dictionary mapping socket module
    constants to their names.
    """
    return dict( (getattr(socket, n), n)
                 for n in dir(socket)
                 if n.startswith(prefix)
                 )

families = get_constants('AF_')
types = get_constants('SOCK_')
protocols = get_constants('IPPROTO_')

# Create a TCP/IP socket
sock = socket.create_connection(('localhost', 10000))

print >>sys.stderr, 'Family  :', families[sock.family]
print >>sys.stderr, 'Type    :', types[sock.type]
print >>sys.stderr, 'Protocol:', protocols[sock.proto]
print >>sys.stderr

try:

    # Send data
    message = 'This is the message.  It will be repeated.'
    print >>sys.stderr, 'sending "%s"' % message
    sock.sendall(message)

    amout_received = 0
    amout_expected = len(message)

    while amout_received < amout_expected:
        data = sock.recv(16)
        amout_received += len(data)
        print >>sys.stderr, 'received "%s"' % data

finally:
    print >>sys.stderr, 'closing socket'
    sock.close()

    create_connection() 使用 getaddrinfo() 来查找候选连接参数，并返回一个打开的 socket，它的第一个配置可以成功创建一个连接。可以检查 family、type 和 proto 属性确定返回的 socket 类型。
    5. 选择监听地址
    将服务器绑定到正确的地址很重要，这样客户才能与之通信。前面的例子都使用 'localhost' 作为 IP 地址，这会限制为只能连接在同一服务器上运行的客户。可以使用服务器的一个公共地址，如 gethostname() 返回的值，从而允许其他主机连接。下面这个例子修改了回应服务器，让它监听到一个命令行参数指定的地址。

import socket
import sys

# Create a TCP/IP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Bind the socket to the address given on the command line
server_name = sys.argv[1]
server_address = (server_name, 10000)
print >>sys.stderr, 'starting up on %s port %s' % server_address
sock.bind(server_address)
sock.listen(1)

while True:
    print >>sys.stderr, 'waiting for a connection'
    connection, client_address = sock.accept()
    try:
        print >>sys.stderr, 'client connected:', client_address
        while True:
            data = connection.recv(16)
            print >>sys.stderr, 'received "%s"' % data
            if data:
                connection.sendall(data)
            else:
                break
    finally:
        connection.close()

    测试这个服务器之前，需要对客户程序做类似的修改。

import socket
import sys

# Create a TCP/IP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Connect the socket to the port on the server given by the caller
server_address = (sys.argv[1], 10000)
print server_address
print >>sys.stderr, 'connecting to %s port %s' % server_address
sock.connect(server_address)

try:
    # Send data
    message = 'This is the message.  It will be repeated.'
    print >>sys.stderr, 'sending "%s"' % message
    sock.sendall(message)

    # Look for the response
    amout_received = 0
    amout_expected = len(message)

    while amout_received < amout_expected:
        data = sock.recv(16)
        amout_received += len(data)
        print >>sys.stderr, 'received "%s"' % data

finally:
    print >>sys.stderr, 'closing socket'
    sock.close()

    启动服务器并提供参数 farnsworth.hellfly.net 之后，netstat 命令显示出它在监听指定的主机地址。

host farnsworth.hellfly.net
netstat -an

    在另一个主机上运行这个客户时，传入 farnsworth.hellfly.net 作为运行服务器的主机。
    很多服务器有不止一个网络接口，相应的会有不止一个 IP 地址。并不需要运行服务的不同副本分别绑定到各个 IP 地址，可以使用一个特殊的地址 INADDR_ANY 同时监听所有地址。socket 为 INADDR_ANY 定义了一个常量，这是一个整数值，但在传递到 bind() 之前必须将它转换为采用点记法的地址字符串。作为一种快捷方式，可以使用 "0.0.0.0" 或空串 ('') 而不是完成转换。

import socket
import sys

# Create a TCP/IP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Bind the socket to the address given on the command line
server_address = ('', 10000)
sock.bind(server_address)
print >>sys.stderr, 'starting up on %s port %s' % sock.getsockname()
sock.listen(1)

while True:
    print >>sys.stderr, 'waiting for a connection'
    connection, client_address = sock.accept()
    try:
        print >>sys.stderr, 'client connected:', client_address
        while True:
            data = connection.recv(16)
            print >>sys.stderr, 'received "%s"' % data
            if data:
                connection.sendall(data)
            else:
                break
    finally:
        connection.close()

    要看一个套接字使用的具体地址，可以调用 getsockname() 方法。启动服务后，再次运行 netstat，可以显示出它在监听所有地址的传入连接。
用户数据报客户和服务器
    用户数据协议（user datagram protocol, UDP）的工作方式与 TCP/IP 不同。TCP 是一个面向流（stream-oriented）的协议，确保所有数据以正确的顺序传输，而 UDP 是一个面向消息（message-oriented）的协议。UDP 不需要一个长期活动的连接，所以建立 UDP 套接字稍简单一些。另一方面，UDP 消息必须放在一个数据包（对于 IPv4，这意味着它们可以包含 65507 字节，因为 65535 字节大小的数据包还包括首部信息），而且无法得到 TCP 提供的传输保障。
    1. 回应服务器
    由于实际上并没有连接，服务器并不需要监听和接受连接。它只需要使用 bind() 将其套接字与一个端口关联，然后等待各个消息。

import socket
import sys

# Create a UDP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# Bind the socket to the port
server_address = ('localhost', 10000)
print >>sys.stderr, 'starting up on %s port %s' % server_address
sock.bind(server_address)

    使用 recvfrom() 从套接字读取消息，这个函数会返回数据，还会返回发出这个数据的客户地址。

while True:
    print >>sys.stderr, '\nwaiting to receive message'
    data, address = sock.recvfrom(4096)

    print >>sys.stderr, 'received %s bytes from %s' % \
          (len(data), address)
    print >>sys.stderr, data

    if data:
        sent = sock.sendto(data, address)
        print >>sys.stderr, 'sent %s bytes back to %s' % \
              (sent, address)

    2. 回应客户
    UDP 回应客户与服务器类似，但是不使用 bind() 将套接字关联到一个地址。它使用 sendto() 将消息直接传送到服务器，并不使用 recvfrom() 接收响应。

import socket
import sys

# Create a UDP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

server_address = ('localhost', 10000)
message = 'This is the message.  It will be repeated.'

try:
    # Send data
    print >>sys.stderr, 'sending "%s"' % message
    sent = sock.sendto(message, server_address)

    # Receive response
    print >>sys.stderr, 'waiting to receive'
    data, server = sock.recvfrom(4096)
    print >>sys.stderr, 'received "%s"' % data

finally:
    print >>sys.stderr, 'closing socket'
    sock.close()

UNIX 域套接字
    从程序员的角度来看，使用 UNIX 域套接字和 TCP/IP 套接字存在两个根本区别。首先，套接字的地址是文件系统上的一个路径，而不是一个包含服务器名和端口的元组。其次，文件系统中创建的表示套接字的节点会持久保存，即使套接字关闭也仍然存在，所以每次服务器启动时都需要将其删除。只需在设置部分做一些修改，就可以把前面的回应服务器例子更新为使用 UDS。

import socket
import sys
import os

server_address = './uds_socket'

# Make sure the socket does not already exist
try:
    os.unlink(server_address)
except OSError:
    if os.path.exists(server_address):
        raise

    需要基于地址簇 AF_UNIX 创建 socket。

# Create a UDS socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)

    套接字的绑定和到来连接的管理与 TCP/IP 套接字的做法相同。

# Bind the socket to the address
print >>sys.stderr, 'starting up on %s' % server_address
sock.bind(server_address)
# Listen for incoming connections
sock.listen(1)

while True:
    # Waiting for a connection
    print >>sys.stderr, 'waiting to connection'
    connection, client_address = sock.accept()
    try:
        print >>sys.stderr, 'connection from', client_address

        # Receive the data in small chunks and retransmit it
        while True:
            data = connection.recv(16)
            print >>sys.stderr, 'received "%s"' % data
            if data:
                print >>sys.stderr, 'sending data back to the client'
                connection.sendall(data)
            else:
                print >>sys.stderr, 'no data from', client_address
                break

    finally:
        # Clean up the connection
        connection.close()

    还需要修改客户设置来使用 UDS。要假设套接字的相应文件系统节点存在，因为服务器要通过绑定这个地址来创建套接字。

import socket
import sys

# Create a UDS socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)

# Connection the socket to the port where the server is listening
server_address = './uds_socket'
print >>sys.stderr, 'connecting to %s' % server_address
try:
    sock.connect(server_address)
except socket.error, msg:
    print >>sys.stderr, msg
    sys.exit(1)

    UDS 客户中发生和接收数据的做法与前面的 TCP/IP 客户是一样的。

try:

    # Send data
    message = 'This is the message.  It will be repeated.'
    print >>sys.stderr, 'sending "%s"' % message
    sock.sendall(message)

    amout_received = 0
    amout_expected = len(message)

    while amout_received < amout_expected:
        data = sock.recv(16)
        amout_received += len(data)
        print >>sys.stderr, 'received "%s"' % data

finally:
    print >>sys.stderr, 'closing socket'
    sock.close()

    程序输出基本上相同，但对地址信息有适当的更新。服务器显示接收的消息，并发回给客户。客户立即发送所有消息，并采用增量方式逐部分接收消息。
    1. 权限
    由于 UDS 套接字由文件系统上的一个节点表示，所以可以使用标准文件系统权限来控制对服务器的访问。

sudo chown root ./uds_socket

    如果客户作为一个用户运行而不是作为 root，现在会导致一个错误，因为进程没有打开套接字的权限。
    2. 父进程与子进程间通信
    在 UNIX 下，socketpair() 函数对于建立 UDS 套接字完成进程间通信很有用。它会创建一对连接的套接字，在创建子进程之后，可以用来在父进程和子进程之间通信。

import socket
import os

parent, child = socket.socketpair()

pid = os.fork()

if pid:
	print 'in parent, sending message'
	child.close()
	parent.sendall('ping')
	response = parent.recv(1024)
	print 'response from child:', response
	parent.close()

else:
	print 'in child, waiting for message'
	parent.close()
	message = child.recv(1024)
	print 'message from parent:', message
	child.sendall('pong')
	child.close()

    默认地会创建一个 UDS 套接字，不过调用者还可以传递地址簇、套接字类型，甚至协议选项来控制如何创建套接字。
组播
    点对点连接可以处理很多通信需求，不过随着直接连接数的增加，在多对通信方之间传递相同的消息会变得越来越困难。单独地向各个接收方发送消息会耗费额外的处理和带宽，这对于流视频或音频等应用会带来问题。使用组播（multicast）向多个端点同时发送消息则可以得到更好的效率，因为网络基础设施可以确保数据包会传送到所有接收方。
    组播消息总是使用 UDP 发送，因为 TCP 需要一个端对端通信通道。组播的地址称为组播组（multicast group），这是常规的 IPv4 地址范围的一个子集（224.0.0.0 到 230.255.255.255），专门为组播通信预留。这些地址会由网络路由器和交换机特殊处理，所以发送到组的消息可以在互联网上分发到加入这个组的所有接收方。
    1. 发送组播消息
    修改后的这个回应客户会向一个组播组发送一个消息，然后报告它收到的所有响应。由于无法知道会收到多少响应，它对套接字使用了一个超时值，以避免等待回答时无限阻塞。

import socket
import struct
import sys

message = 'very important data'
multicast_group = ('224.3.29.71', 10000)

# Create the datagram socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# Set a timeout so the socket does not block indefinitely when trying
# to receive data.
sock.settimeout(0.2)

    配置这个套接字时还需要提供消息的一个生存时间值（time-to-live value, TTL）。TTL 会控制多少网络接收这个数据包。使用 IP_MULTICAST_TTL 选项和 setsockopt() 来设置 TTL。默认值 1 表示路由器不会把数据包转发到当前网段之外。这个值取值范围最大为 255，应当包装到一个字节中。

# Set the time-to-live for messages to 1 so they do not go past the
# local network segment.
ttl = struct.pack('b', 1)
sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, ttl)

    发送者程序的其余代码类似于 UDP 回应客户，只是它会接收多个响应，所以这里使用一个循环来调用 recvfrom()，直到超时。

try:

	# Send data to the multicast group
	print >>sys.stderr, 'sending "%s"' % message
	sent = sock.sendto(message, multicast_group)

	# Look for responses from all recipients
	while True:
		print >>sys.stderr, 'waiting to receive'
		try:
			data, server = sock.recvfrom(16)
		except socket.timeout:
			print >>sys.stderr, 'timed out, no more responses'
			break
		else:
			print >>sys.stderr, 'received "%s" from %s' % \
			    (data, server)

finally:
	print >>sys.stderr, 'closing socket'
	sock.close()

    2. 接收组播消息
    建立组播接收者的第一步是创建 UDP 套接字。

import socket
import struct
import sys

multicast_group = '224.3.29.71'
server_address = ('', 10000)

# Create the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# Bind to the server address
sock.bind(server_address)

    创建常规的套接字并绑定到一个端口后，可以使用 setsockopt() 改变 IP_ADD_MEMBERSHIP 选项，把它添加到组播组。这个选项值是一个 8 字节的打包表示，包括组播组地址，后面是服务器监听通信流的网络接口（由其 IP 地址标识）。在这里，接收者使用 INADDR_ANY 监听所有借口。

# Tell the operating system to add the socket to the multicast group
# on all interfaces.
group = socket.inet_aton(multicast_group)
mreq = struct.pack('4sL', group, socket.INADDR_ANY)
sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)

    接收者的主循环与常规 UDP 回应服务器类似。

# Receive/respond loop
while True:
	print >>sys.stderr, '\nwaiting to receive message'
	data, address = sock.recvfrom(1024)

	print >>sys.stderr, 'received %s bytes from %s' % \
	    (len(data), address)
	print >>sys.stderr, data

	print >>sys.stderr, 'sending acknowledgement to', address
	sock.sendto('ack', address)

    分别在两个不同主机上运行，消息只发送一次，但是会接收到对发出消息的两个应答，分别来自两个主机。
发送二进制数据
    套接字可以传输字节流。这些字节可能包含文本消息，或者它们也可能由二进制数据构成，这些二进制数据已经编码以便传输。为了完成二进制数据值的传输，要用 struct 把它们打包到一个缓冲区。
    下面这个客户程序将一个整数、一个包含两字符的字符串和一个浮点数值编码为一个字节序列，以便传递到套接字完成传输。

import binascii
import socket
import struct
import sys

# Create a TCP/IP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_address = ('localhost', 10000)
sock.connect(server_address)

values = (1, 'ab', 2.7)
packer = struct.Struct('I 2s f')
packed_data = packer.pack(*values)

print 'values =', values

try:

	# Send data
	print >>sys.stderr, 'sending %r' % binascii.hexlify(packed_data)
	sock.sendall(packed_data)

finally:
	print >>sys.stderr, 'closing socket'
	sock.close()

    在两个系统之间发送多字节的二进制数据时，有一点很重要，要确保连接的两端都知道采用哪一种字节顺序，以及如何把它们重新组装为适合本地体系结构的正确顺序。服务器程序使用了相同的 Struct 指示工具（specifier）来解开接收到的字节，从而以正确的顺序解释。

import binascii
import socket
import struct
import sys

# Create a TCP/IP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_address = ('localhost', 10000)
sock.bind(server_address)
sock.listen(1)

unpacker = struct.Struct('I 2s f')

while True:
	print >>sys.stderr, '\nwaiting for a connection'
	connection, client_address = sock.accept()

	try:
		data = connection.recv(unpacker.size)
		print >>sys.stderr, 'received %r' % binascii.hexlify(data)
		unpacked_data = unpacker.unpack(data)
		print >>sys.stderr, 'unpacked:', unpacked_data
		
	finally:
		connection.close()

    浮点数值在打包和解包时会损失一些精度，不过数据确实能按期望的方式传输。有一点要记住，取决于整数的值，有时将它转换为文本然后再传输可能更为高效，而不是使用 struct。整数 1 表示为字符串时占用一个字节，而打包到结构中时会占用 4 个字节。
非阻塞通信和超时
    默认情况下，socket 配置为发送或接收数据时会阻塞，在套接字准备就绪之前将停止程序的执行。send() 调用等待有缓冲区空间来存放发出的数据，recv() 则等待其他程序发出数据以供读取。这种形式的 I/O 操作很容易理解，不过可能导致操作很低效，如果两个程序最后都在等待对方发送或接收数据，甚至会导致死锁。
    有很多中方法来绕开这种情况。一种做法是对各个套接字分别使用单独的线程完成通信。不过，这可能引入线程间通信的其他复杂性。另一种选择是将套接字改为根本不阻塞，即使没有准备好来处理操作，也会立即返回。可以使用 setblocking() 方法改变一个套接字的阻塞标志。默认值为 1，这表示会阻塞。传入值 0 则会关闭阻塞。如果套接字将阻塞关闭，而且没有为处理操作做好准备，则会产生一个 socket.err。
    一种折衷的解决方案是为套接字操作设置一个超时值。可以使用 settimeout() 将一个 socket 的超时值改为一个浮点数值，表示在确定这个套接字未做好操作准备之前阻塞的时间（秒数）。超过这个超时期限时，会产生一个 timeout 异常。
