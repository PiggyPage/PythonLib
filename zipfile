[Python标准库]zipfile——ZIP 归档访问
    作用：读写 ZIP 归档文件。
    Python 版本：1.6 及以后版本
    zipfile 模块可以用来管理 ZIP 归档文件，这种格式因 PC 程序 PKZIP 得到普及。
测试 ZIP 文件
    is_zipfile() 函数返回一个布尔值，指示作为参数传入的文件名是否指向一个合法的 ZIP 归档。

import zipfile

for filename in [ 'README.txt', 'example.zip',
                  'bad_example.zip', 'notthere.zip' ]:
    print '%15s  %s' % (filename, zipfile.is_zipfile(filename))

    如果这个文件不存在，则 is_zipfile() 返回 False。
从归档读取元数据
    使用 ZipFile 类可以直接处理一个 ZIP 归档。它支持一些方法来读取现有归档的有关数据，还可以增加额外的文件从而修改归档。

import zipfile

with zipfile.ZipFile('example.zip', 'r') as zf:
    print zf.namelist()

    namelist() 方法返回一个现有归档中的文件名。
    不过，这个文件名列表只是从归档得到的信息的一部分。要访问有关 ZIP 内容的所有元数据，可以使用 infolist() 或 getinfo() 方法。

import datetime
import zipfile

def print_info(archive_name):
    with zipfile.ZipFile(archive_name) as zf:
        for info in zf.infolist():
            print info.filename
            print '\tComment      :', info.comment
            mod_date = datetime.datetime(*info.date_time)
            print '\tModified     :', mod_date
            if info.create_system == 0:
                system = 'Windows'
            elif info.create_system == 3:
                system = 'Unix'
            else:
                system = 'UNKNOWN'
            print '\tSystem       :', system
            print '\tZIP version  :', info.create_version
            print '\tCompressed   :', info.compress_size, 'bytes'
            print '\tUncompressed :', info.file_size, 'bytes'
            print

if __name__ == '__main__':
    print_info('example.zip')

    除了这里打印的字段，元数据还包括另外一些字段，但是要把这些值解释为有用的信息，需要仔细阅读 ZIP 文件规范的 PKZIP 应用说明。
    如果提前已经知道归档成员名，可以利用 getinfo() 直接获取其 ZipInfo 对象。

import zipfile

with zipfile.ZipFile('example.zip', 'r') as zf:
    for filename in [ 'README.txt', 'notthere.txt' ]:
        try:
            info = zf.getinfo(filename)
        except KeyError:
            print 'ERROR: Did not find %s in zip file' % filename
        else:
            print '%s is %d bytes' % (info.filename, info.file_size)

    如果归档成员不存在，getinfo() 会产生一个 KeyError。
从归档抽取归档文件
    要从一个归档成员访问数据，可以使用 read() 方法，并传入该成员名。

import zipfile

with zipfile.ZipFile('example.zip', 'r') as zf:
    for filename in [ 'README.txt', 'notthere.txt' ]:
        try:
            data = zf.read(filename)
        except KeyError:
            print 'ERROR: Did not find %s in zip file' % filename
        else:
            print filename, ':'
            print data
        print

    如果必要，数据会自动解压缩。
创建新归档
    要创建一个新归档，需要用模式 'w' 实例化 ZipFile。所有现有的文件会被删除，而开始创建一个新的归档。要增加文件，可以使用 write() 方法。

from zipfile_infolist import print_info
import zipfile

print 'creating archive'
with zipfile.ZipFile('example.zip', mode='w') as zf:
    print 'adding README.txt'
    zf.write('README.txt')

print
print_info('example.zip')

    默认情况下，归档的内容不会压缩。
    要想增加压缩，需要有 zlib 模块。如果 zlib 可用，可以使用 zipfile.ZIP_DEFLATED 设置单个文件的压缩模式，或者将归档作为整体设置其压缩模式。默认的压缩模式是 zipfile.ZIP_STORED，它会把输入数据增加到归档而不压缩。

from zipfile_infolist import print_info
import zipfile
try:
    import zlib
    compression = zipfile.ZIP_DEFLATED
except:
    compression = zipfile.ZIP_STORED

modes = { zipfile.ZIP_DEFLATED: 'deflated',
          zipfile.ZIP_STORED:   'stored',
          }

print 'creating archive'
with zipfile.ZipFile('example.zip', mode='w') as zf:
    mode_name = modes[compression]
    print 'adding README.txt with compression mode', mode_name
    zf.write('README.txt', compress_type=compression)

print
print_info('example.zip')

    这一次归档成员会压缩。
使用候选归档成员名
    为文档增加文件时，可以向 write() 传入一个 arcname 值，这样可以使用另一个名字而非原始文件名。

from zipfile_infolist import print_info
import zipfile

with zipfile.ZipFile('write_arcname.zip', mode='w') as zf:
    zf.write('README.txt', arcname='NOT_README.txt')

print_info('write_arcname.zip')

    归档中不会再出现原始文件名。
从非文件源写数据
    有时，可能需要使用其他来源的数据写一个 ZIP 归档（而非来自一个现有文件）。并不是将数据先写入一个文件，然后再把这个文件添加到 ZIP 归档，可以使用 writestr() 直接向归档写入一个字节串。

from zipfile_infolist import print_info
import zipfile

msg = 'This data did not exist in a file.'
with zipfile.ZipFile('writestr.zip',
                     mode='w',
                     compression=zipfile.ZIP_DEFLATED,
                     ) as zf:
    zf.writestr('from_string.txt', msg)

print_info('writestr.zip')

with zipfile.ZipFile('writestr.zip', 'r') as zf:
    print zf.read('from_string.txt')

    在这里，要利用 ZipFile 的 compress_type 参数压缩数据，因为 writestr() 不接受参数来指定压缩。
利用 ZipInfo 实例写
    正常情况下，文件或串添加到归档时会计算修改日期。可以向 writestr() 传递一个 ZipInfo 实例，来定义修改日期和其他元数据。

import time
from zipfile_infolist import print_info
import zipfile

msg = 'This data did not exist in a file.'
with zipfile.ZipFile('writestr_zipinfo.zip',
                     mode='w',
                     ) as zf:
    info = zipfile.ZipInfo('from_string.txt',
                           date_time=time.localtime(time.time()),
                           )
    info.compress_type=zipfile.ZIP_DEFLATED
    info.comment='Remarks go here'
    info.create_system=0
    zf.writestr(info, msg)

print_info('writestr_zipinfo.zip')

    在这个例子中，修改时间设置为当前时间，并对数据进行了压缩，另外 create_system 使用了一个 false 值。还可以为这个新文件关联一个简单的注释。
追加到文件
    除了创建新归档，还可以追加到一个现有的归档，或者将一个归档添加到一个现有文件的末尾（如为一个自解压归档添加一个 .exe 文件）。要打开一个文件来完成追加，可以使用模式 'a'。

from zipfile_infolist import print_info
import zipfile

print 'creating archive'
with zipfile.ZipFile('append.zip', mode='w') as zf:
    zf.write('README.txt')
print
print_info('append.zip')

print 'appending to the archive'
with zipfile.ZipFile('append.zip', mode='a') as zf:
    zf.write('README.txt', arcname='README2.txt')

print
print_info('append.zip')

    最后得到的归档将包含两个成员。
Python ZIP 归档
    如果归档出现在 sys.path 中，Python 可以使用 zipimport 从这些 ZIP 归档导入模块。PyZipFile 类可以用来构造一个适用于这种方式的模块。另一个方法 writepy() 会告诉 PyZipFile 扫描一个目录来查找 .py 文件，并把相应的 .pyo 或 .pyc 文件添加到归档。如果这两种编译形式都不存在，则创建并添加一个 .pyc 文件。

import sys
import zipfile

if __name__ == '__main__':
    with zipfile.PyZipFile('pyzipfile.zip', mode='w') as zf:
        zf.debug = 3
        print 'Adding python files'
        zf.writepy('.')
    for name in zf.namelist():
        print name

    print
    sys.path.insert(0, 'pyzipfile.zip')
    import zipfile_pyzipfile
    print 'Imported from:', zipfile_pyzipfile.__file__

    将 PyZipFile 的 debug 属性设置为 3，将启用 verbose 调试，会在编译所找到的各个 .py 文件时生成输出。
限制
    zipfile 模块不支持有追加注释或多磁盘归档的 ZIP 文件，但它确实支持使用 ZIP64 扩展的超过 4GB 的 ZIP 文件。