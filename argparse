[Python标准库]argparse——命令行选项和参数解析
    作用：命令行选项和参数解析。
    Python 版本：2.7 及以后版本
    Python 2.7 中增加了 argparse 模块，以取代 optparse。argparse 的实现支持一些新特性，这些特性有些不能很容易地增加到 optparse 中，有些则要求不能保证向后兼容的 API 改变。所以，干脆在库中引入了一个新的模块。现在仍支持 optparse，不过不太可能增加新特性了。
与 optparse 比较
    argparse 与 optparse 提供的 API 很类似，很多情况下，argparse 模块可以直接替代 optparse，只需要更新所用的类和方法名。不过，还有一些情况下，由于增加了新特性，所以不能保留直接兼容性。
    要根据具体情况来决定是否对现有程序升级。如果一个应用包含额外的代码来避开 optparse 的限制，升级则可以减少维护工作。对于一个新程序，如果将要部署这个程序的所有平台上都可以得到 argparse，就应当对这个新程序使用 argparse。
建立解析器
    使用 argparse 的第一步是创建一个解析器对象，并告诉它需要什么参数。程序运行时可以使用这个解析器处理命令行参数。解析器类（ArgumentParser）的构造函数可以取多个参数，为程序建立帮助文本中使用的描述以及其他全局行为或设置。

import argparse

parser = argparse.ArgumentParser(
	description='This is a PyMOTW sample program',
	)

定义参数
    argparse 是一个完整的参数处理库。参数可以触发不同的动作，由 add_argument() 的 action 参数指定。支持的动作包括存储参数（单独存储，或者作为列表的一部分存储）、遇到这个参数时存储一个常量值（包括对 Boolean 分支语句的 true/false 值的特殊处理）、统计遇到一个参数的次数，以及调用一个回调来使用定制处理指令。
    默认动作是存储参数值。如果提供了一个类型，存储值之前要将值转换为该类型。如果提供了 dest 参数，解析命令行参数时要用这个名称来保存值。
解析命令行
    定义了所有参数之后，可以将一个参数串序列传递到 parse_args() 来解析命令行。默认情况下，参数由 sys.argv[1:] 得到，不过也可以使用任意的串列表。选项使用 GNU/POSIX 语法处理，所以选项和参数值可以混合出现在序列中。
    parse_args() 的返回值是一个包含命令参数的 Namespace。这个对象会保存参数值（作为属性），所以如果参数的 dest 设置为“myoption”，就可以作为 args.myoption 访问这个值。
简单示例
    下面是一个简单的例子，有 3 个不同的选项：一个布尔选项（-a），一个简单的串选项（-b），以及一个整数选项（-c）。

import argparse

parser = argparse.ArgumentParser(
	description='This is a PyMOTW sample program',
	)

parser.add_argument('-a', action="store_true", default=False)
parser.add_argument('-b', action="store", dest="b")
parser.add_argument('-c', action="store", dest="c", type=int)

print parser.parse_args(['-a', '-bval', '-c', '3'])

    向单字符选项传值有多做方法。前面的例子使用了两种不同形式，-bval 和 -c val。
    与输出中“c”关联的值类型是一个整数，因为要求 ArgumentParser 存储参数之前先完成转换。“长”选项名（名称中包含多个字符）也用同样的方式处理。

import argparse

parser = argparse.ArgumentParser(
	description='Example with long option names',
	)

parser.add_argument('--noarg', action="store_true", default=False)
parser.add_argument('--witharg', action="store", dest="witharg")
parser.add_argument('--witharg2', action="store", dest="witharg2", type=int)

print parser.parse_args(['--noarg', '--witharg', 'val', '--witharg2=3'])

    结果也是类似的。
    有一个方面 argparse 与 optparse 有所不同，即对非选项参数值的处理。optparse 只完成选项解析，argparse 则是一个完备的命令行参数解析工具，还可以处理非选项参数。

import argparse

parser = argparse.ArgumentParser(
	description='Example with nonoptional arguments',
	)

parser.add_argument('count', action="store", type=int)
parser.add_argument('units', action="store")

print parser.parse_args()

    1. 参数动作
    遇到一个参数时会触发 6 个内置动作。
    store：保存值，可能首先要将值转换为一个不同的类型（可选）。如果没有显式指定任何动作，这将是默认动作。
    store_const：保存作为参数规范的一部分定义的一个值，而不是来自所解析的参数。这通常用于实现非布尔类型的命令行标志。
    store_true / store_false：保存适当的布尔值。这些动作用于实现 Boolean 分支语句。
    append：将值保存到一个列表。如果参数重复则会保存多个值。
    append_const：将参数规范中定义的一个值保存到一个列表。
    version：打印程序的版本详细信息，然后退出。
    下面这个示例程序展示了各种动作类型，这里提供了触发各个动作所需的最小配置。

import argparse

parser = argparse.ArgumentParser()

parser.add_argument('-s', action="store",
					dest='simple_value',
					help='Store a simple value')

parser.add_argument('-c', action="store_const",
					dest='constant_value',
					const='value-to-store',
					help='Store a constant value')

parser.add_argument('-t', action="store_true",
					default=False,
					dest='boolean_switch',
					help='Set a switch to true')
parser.add_argument('-f', action="store_false",
					default=False,
					dest='boolean_switch',
					help='Set a switch to false')

parser.add_argument('-a', action="append",
					dest='collection',
					default=[],
					help='Add repeated values to a list')

parser.add_argument('-A', action="append_const",
					dest='const_collection',
					const='value-1-to-append',
					default=[],
					help='Add different values to list')

parser.add_argument('-B', action="append_const",
					dest='const_collection',
					const='value-2-to-append',
					help='Add different values to list')

parser.add_argument('--version', action="version",
					version='%(prog)s 1.0')

results = parser.parse_args()
print 'simple_value     = %r' % results.simple_value
print 'constant_value   = %r' % results.constant_value
print 'boolean_switch   = %r' % results.boolean_switch
print 'collection       = %r' % results.collection
print 'const_collection = %r' % results.const_collection

    -t 和 -f 选项配置为修改同一个选项值，所以它们相当于一个布尔开关。-A 和 -B 的 dest 值相同，因此其常量值会追加到同一个列表。
    2. 选项前缀
    选项的默认语法基于一个 UNIX 约定：使用一个短横线（“-”）前缀来指示命令行开关。argparse 还支持其他前缀，所以程序可以采用本地平台的默认设置（在 Windows 上则使用“/”），或者遵循一个不同的约定。

import argparse

parser = argparse.ArgumentParser(
	description='Change the option prefix characters',
	prefix_chars='-+/',
	)

parser.add_argument('-a', action="store_false",
					default=None,
					help='Turn A off',
					)
parser.add_argument('+a', action="store_true",
					default=None,
					help='Turn A on',
					)
parser.add_argument('//noarg', '++noarg',
					action="store_true",
					default=False)

print parser.parse_args()

    将 ArgumentParser 的 prefix_chars 参数设置为一个字符串，其中包含允许指示选项的所有字符。有一点要了解，尽管 prefix_chars 建立了允许的开关字符，但是要由单独的参数定义来指定一个给定开关的语法，这一点很重要。这样就能显式地控制使用不同前缀的选项究竟是别名（如平台独立的命令行语法就属于这种情况）还是替代选项（例如，使用“+”指示打开一个开关，用“-”关闭开关）。在前面的例子中，+a 和 -a 是不同的参数，//noarg 也可以指定为 ++noarg，不过不能指定为 --noarg。
    3. 参数来源
    在目前为止的例子中，提供给解析器的参数列表都是显式传入的一个列表，或者隐式地从 sys.argv 取参数。有一些类似命令行指令并非来自命令行（如配置文件中的指令），使用 argparse 处理这种指令时，显式地传入列表会很有用。

import argparse
from ConfigParser import ConfigParser
import shlex

parser = argparse.ArgumentParser(description='Short sample app')

parser.add_argument('-a', action="store_true", default=False)
parser.add_argument('-b', action="store", dest="b")
parser.add_argument('-c', action="store", dest="c", type=int)

config = ConfigParser()
config.read('argparse_with_shlex.ini')
config_value = config.get('cli', 'options')
print 'Config  :', config_value

argument_list = shlex.split(config_value)
print 'Arg List:', argument_list

print 'Results :', parser.parse_args(argument_list)

    利用 shlex 可以很容易地分解存储在配置文件中的字符串。

#argparse_with_shlex.ini
[cli]
options=-a -b 2

    应用代码中处理配置文件还有一种做法，可以使用 fromfile_prefix_chars 告诉 argparse 如何识别一个指定输入文件的参数（这个文件中包含一组要处理的参数）。

import argparse
from ConfigParser import ConfigParser
import shlex

parser = argparse.ArgumentParser(
	description='Short sample app',
	fromfile_prefix_chars='@',
	)

parser.add_argument('-a', action="store_true", default=False)
parser.add_argument('-b', action="store", dest="b")
parser.add_argument('-c', action="store", dest="c", type=int)

print parser.parse_args(['@argparse_fromfile_prefix_chars.txt'])

    这个例子发现一个有 @ 前缀的参数时会停止，然后读取指定的文件来查找更多参数。例如，输入文件 argparse_fromfile_prefix_chars.txt 包含一系列参数，每个参数各占一行。

    -a
    -b
    2

    处理这个文件时生成的输出如下：

Namespace(a=True, b='2', c=None)

自动生成的选项
    argparse 会自动添加选项来生成帮助，并显示应用的版本信息（如果有这个配置）。
    ArgumentParser 的 add_help 参数控制与帮助相关的选项。

import argparse

parser = argparse.ArgumentParser(add_help=True)

parser.add_argument('-a', action="store_true", default=False)
parser.add_argument('-b', action="store", dest="b")
parser.add_argument('-c', action="store", dest="c", type=int)

print parser.parse_args()

    会默认增加帮助选项（-h 和 --help），不过也可以将 add_help 设置为 false 禁用这些帮助选项。

import argparse

parser = argparse.ArgumentParser(add_help=False)

parser.add_argument('-a', action="store_true", default=False)
parser.add_argument('-b', action="store", dest="b")
parser.add_argument('-c', action="store", dest="c", type=int)

print parser.parse_args()

    尽管 -h 和 --help 是请求帮助的事实标准选项名，不过有些应用或 argparse 的某些用法可能不需要提供帮助，或者需要用这些选项名来提供其他用途。
    在 ArgumentParser 构造函数中设置版本（version）时会增加版本选项（-v 和 --version）。

import argparse

parser = argparse.ArgumentParser(version='1.0')

parser.add_argument('-a', action="store_true", default=False)
parser.add_argument('-b', action="store", dest="b")
parser.add_argument('-c', action="store", dest="c", type=int)

print parser.parse_args()

print 'This is not printed'

    这两种格式的选项都会打印程序的版本串，然后立即退出。
解析器组织
    argparse 包含很多特性来组织参数解析器，以便于实现，或者改善帮助输出的可用性。
    1. 共享解析器原则
    程序员通常需要实现一组命令行工具，它们都取一组参数，然后以某种方式特殊化。例如，如果程序在采取具体行动之前都需要认证用户，它们就都需要支持 --user 和 --password 选项。不必显式地将这些选项添加到每一个 ArgumentParser 中，完全可以用这些共享选项定义一个父解析器，然后让各个程序的解析器继承它的选项。
    第一步是用共享参数定义来建立解析器。由于父解析器的各个后续用户会尝试添加相同的帮助选项，这会导致一个异常，所以要在基解析器中关闭自动帮助生成。

import argparse

parser = argparse.ArgumentParser(add_help=False)
parser.add_argument('--user', action="store")
parser.add_argument('--password', action="store")

    接下来，用 parents 集合创建另一个解析器。

import argparse
import argparse_parent_base

parser = argparse.ArgumentParser(
	parents=[argparse_parent_base.parser],
	)

parser.add_argument('--local-arg',
					action="store_true",
					default=False)

print parser.parse_args()

    得到的程序将有 3 个选项。
    2. 选项冲突
    前面的例子指出，使用相同的参数名向一个解析器添加两个参数处理程序时，会导致一个异常。可以传入一个 conflict_hendler 改变冲突解析行为。有两个内置的处理程序，分别是 error（默认）和 resolve，它们会根据处理程序添加的顺序来选择处理程序。

import argparse

parser = argparse.ArgumentParser(conflict_handler='resolve')

parser.add_argument('-a', action="store")
parser.add_argument('-b', action="store", help="Short alone")
parser.add_argument('--long-b', '-b',
					action="store", help="Long and short together")

print parser.parse_args(['-h'])

    在这个例子中，由于使用了给定参数名的最后一个处理程序，独立选项 -b 被 --long-b 的列名屏蔽。
    改变 add_argument() 调用的顺序，就可以不再屏蔽独立选项。

import argparse

parser = argparse.ArgumentParser(conflict_handler='resolve')

parser.add_argument('-a', action="store")
parser.add_argument('--long-b', '-b',
					action="store", help="Long and short together")
parser.add_argument('-b', action="store", help="Short alone")

print parser.parse_args(['-h'])

    现在两个选项可以一起使用。
    3. 参数组
    argparse 将参数定义合并为“组”。默认情况下，它会使用两个组，一个对应选项，另一个对应必要的基于位置的参数。

import argparse

parser = argparse.ArgumentParser(description='Short sample app')

parser.add_argument('--optional', action="store_true", default=False)
parser.add_argument('positional', action="store")

print parser.parse_args()

    帮助输出的“位置参数”（positional argument）和“可选参数”（optional argument）部分可以反映出这种分组。
    可以调整这种分组，使帮助更有条理，将相关的选项或值放在一起。可以使用定制组重新编写前面的共享选项示例，使得认证选项一同出现在帮助中。
    用 add_argument_group() 创建“authentication”组，然后将与认证有关的各个选项添加到这个组，而不是添加到基解析器。

import argparse

parser = argparse.ArgumentParser(add_help=False)

group = parser.add_argument_group('authentication')

group.add_argument('--user', action="store")
group.add_argument('--password', action="store")

    如果程序使用了基于组的父解析器，要像前面一样把它列在 parents 值中。

import argparse
import argparse_parent_with_group

parser = argparse.ArgumentParser(
	parents=[argparse_parent_with_group.parser],
	)

parser.add_argument('--local-arg', action="store_true", default=False)

print parser.parse_args()

    现在帮助输出会把认证选项显示在一起。
    4. 互斥选项
    定义互斥选项是选项分组特性的一个特殊情况，要使用 add_mutually_exclusive_group() 而不是 add_argument_group()。

import argparse

parser = argparse.ArgumentParser()

group = parser.add_mutually_exclusive_group()
group.add_argument('-a', action="store_true")
group.add_argument('-b', action="store_true")

print parser.parse_args()

    argparse 会保证这种互斥性，从而只能指定组中的一个选项。
    5. 嵌套解析器
    前面介绍的父解析器方法只是在相关命令之间共享选项的一种方法。还可以采用另一种方法，将命令结合到一个程序中，使用子解析器来处理命令行的各个部分。其做法类似于 svn、hg 和其他有多个命令行动作或子命令的程序。
    如果一个程序要处理文件系统上的目录，可以定义命令来创建、删除和列出目录的内容，如下所示。

import argparse

parser = argparse.ArgumentParser()

subparser = parser.add_subparsers(help='commands')

# A list command
list_parser = subparser.add_parser(
	'list', help='List contents')
list_parser.add_argument(
	'dirname', action='store',
	help='Directory to list')

# A create command
create_parser = subparser.add_parser(
	'create', help='Create a directory')
create_parser.add_argument(
	'dirname', action='store',
	help='New directory to create')
create_parser.add_argument(
	'--read-only', default=False, action='store_true',
	help='Set permissions to prevent writing to the directory',
	)

# A delete command
delete_parser = subparser.add_parser(
	'delete', help='Remove a directory')
delete_parser.add_argument(
	'dirname', action='store',
	help='The directory to remove')
delete_parser.add_argument(
	'--recursive', '-r', default=False, action='store_true',
	help='Remove the contents of the directory, too',
	)

print parser.parse_args()

    帮助输出显示子解析器名为“commands”，可以在命令行上作为位置参数指定这个子解析器
    每个子解析器还有自己的帮助，描述该命令的参数和选项。
    解析参数时，parse_args() 返回的 Namespace 对象只包括与指定命令相关的值。
高级参数处理
