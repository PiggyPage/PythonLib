[Python标准库]optparse——命令行选项解析器
    作用：取代 getopt 的命令行选项解析器。
    Python 版本：2.3 及以后版本
    optparse 是当前替代 getopt 的模块，用来完成命令行选项解析，它可以提供 getopt 所没有的很多特性，包括类型转换、选项回调，以及自动生成帮助。除了这里能介绍的特性外，optparse 还有很多其他特性，不过本节会介绍较为常用的一些功能。
创建 OptionParser
    用 optparse 解析选项有两个阶段。首先，构造 OptionParser 实例，并配置期望的选项。然后输入一个选项序列进行处理。

import optparse
parser = optparse.OptionParser()

    一般地，一旦创建了解析器，要显式地向解析器添加各个选项，并提供信息指出命令行上遇到该选项时该如何处理。也可以向 OptionParser 构造函数传递一个选项列表，不过这种做法不常用。
    1. 定义选项
    应当使用 add_option() 方法一次增加一个选项。参数列表前面所有未命名的串参数都处理为选项名。要为一个选项创建别名（也就是同一个选项同时有短格式和长格式），可以传入多个名。
    2. 解析命令行
    定义所有选项之后，可以向 parse_args() 传递一个参数串序列来解析命令行。默认情况下，参数由 sys.argv[1:] 得到，不过也可以显式地传递一个列表。这些选项使用 GNU/POSIX 语法处理，所以选项和参数值可以混合出现在序列中。
    parse_args() 的返回值是一个两部分的元组，其中包含一个 Values 实例以及未解释为选项的命令参数列表。选项的默认处理动作是使用 add_option() 的 dest 参数中指定的名称存储这个值。parse_args() 返回的 Values 实例包含选项值（作为属性），所以，如果一个选项的 dest 设置为“myoption"，就可以作为 options.myoption 访问这个选项值。
短格式和长格式选项
    下面是一个简单的例子，有 3 个不同的选项：一个布尔选项 (-a)，一个简单的串选项 (-b)，以及一个整数选项 (-c)。

import optparse

parser = optparse.OptionParser()
parser.add_option('-a', action="store_true", default=False)
parser.add_option('-b', action="store", dest="b")
parser.add_option('-c', action="store", dest="c", type="int")

print parser.parse_args(['-a', '-bval', '-c', '3'])

    类似于 getopt.gnu_geropt()，optparse 用同样的规则解析命令行选项，所以有两种方法向单字符选项传值。这两种形式在例子中都用到了，具体为 -bval 和 -c val。
    与输出中“c”关联的值类型是一个整数，因为要求 OptionParser 存储参数之前先进行转换。不同于 getopt，optparse 对“长”选项名的处理并无不同。

import optparse

parser = optparse.OptionParser()
parser.add_option('--noarg', action="store_true", default=False)
parser.add_option('--witharg', action="store", dest="witharg")
parser.add_option('--witharg2', action="store", dest="witharg2", type="int")

print parser.parse_args(['--noarg', '--witharg', 'val', '--witharg2=3'])

    结果也是相似的。
用 getopt 比较
    由于 optparse 要替换 getopt，下面这个例子重新实现了 getopt 一节中的示例程序。

import optparse
import sys

print 'ARGV      :', sys.argv[1:]

parser = optparse.OptionParser()
parser.add_option('-o', '--output',
				 dest="output_filename",
				 default="default.out",
				 )
parser.add_option('-v', '--verbose',
				 dest="verbose",
				 default="False",
				 action="store_true",
				 )
parser.add_option('--version',
				 dest="version",
				 default=1.0,
				 type="float",
				 )
options, remainder = parser.parse_args()

print 'VERSION   :', options.version
print 'VERBOSE   :', options.verbose
print 'OUTPUT    :', options.output_filename
print 'REMAINING :', remainder

    由于同时增加了选项 -o 和 --output，所以它们是别名。可以在命令行上使用任意一个选项。

$ python optparse_getoptcomparison.py -o output.txt
ARGV      : ['-o', 'output.txt']
VERSION   : 1.0
VERBOSE   : False
OUTPUT    : output.txt
REMAINING : []

$ python optparse_getoptcomparison.py --output output.txt
ARGV      : ['--output', 'output.txt']
VERSION   : 1.0
VERBOSE   : False
OUTPUT    : output.txt
REMAINING : []

    还可以使用长选项的唯一前缀。

$ python optparse_getoptcomparison.py --out output.txt 
ARGV      : ['--out', 'output.txt']
VERSION   : 1.0
VERBOSE   : False
OUTPUT    : output.txt
REMAINING : []

选项值
    默认的处理动作是存储选项的参数。如果定义选项时提供了一个类型，在存储这个参数值之前会首先将该值转换为该类型。
    1. 设置默认值
    根据定义，选项是可选的，所以如果命令行上未指定选项，应用应当建立默认行为。定义选项时可以使用参数 default 提供各选项的默认值。

import optparse

parser = optparse.OptionParser()
parser.add_option('-o', action="store", default="default value")

options, args = parser.parse_args()

print options.o

    默认值要与期望的选项类型匹配，因为默认值不会完成任何转换。
    还可以在定义选项之后使用 set_defaults() 的关键字参数加载默认值。

import optparse

parser = optparse.OptionParser()
parser.add_option('-o', action="store")

parser.set_defaults(o="default value")

options, args = parser.parse_args()

print options.o

    如果一个配置文件或其他来源加载默认值，而不是硬编码写入默认值，这种形式就很有用。
    定义的所有选项都可以作为 parse_args() 返回的 Values 实例的属性得到，所以应用在尝试使用一个选项值之前不需要检查这个选项是否存在。

import optparse

parser = optparse.OptionParser()
parser.add_option('-o', action="store")

options, args = parser.parse_args()

print options.o

    如果未向一个选项提供默认值，而且命令行上没有指定这个选项，它的值则为 None。
    2. 类型转换
    optparse 可以把选项值从字符串转换外整数、浮点数、长整数和复杂项。要启用转换，需要指定选项类型为 add_option() 的参数。

import optparse

parser = optparse.OptionParser()
parser.add_option('-i', action="store", type="int")
parser.add_option('-f', action="store", type="float")
parser.add_option('-l', action="store", type="long")
parser.add_option('-c', action="store", type="complex")

options, args = parser.parse_args()

print 'int    : %-16r %s' % (type(options.i), options.i)
print 'float  : %-16r %s' % (type(options.f), options.f)
print 'long   : %-16r %s' % (type(options.l), options.l)
print 'complex: %-16r %s' % (type(options.c), options.c)

    如果一个选项的值不能转换为指定的类型，会打印一个错误，程序将退出。
    通过派生 Option 类，可以创建定制转换。有关的更多详细信息请参考标准库文档。
    3. 枚举
    choice 类型使用一个候选串列表来提供验证。将 type 设置为 choice，并使用 add_option() 的 choice 参数提供合法值列表。

import optparse

parser = optparse.OptionParser()

parser.add_option('-c', type='choice', choices=['a', 'b', 'c'])

options, args = parser.parse_args()

print 'Choice:', options.c

    如果输入不合法会导致一个错误消息，显示允许的值列表。
选项动作
    不同于 getopt（它只解析选项），optparse 则是一个选项处理库。选项可能触发不同的动作，由 add_option() 的 action 参数指定。支持的动作包括存储参数（单独存储，或者作为列表的一部分存储），遇到这个选项时存储一个常量值（包括对 Boolean 分支语句的 true/false 值的特殊处理），统计遇到一个选项的次数，以及调用一个回调。默认动作是 store，这不需要显式指定。
    1. 常量
    选项表示一组固定的选择（如一个应用的操作模式）时，通过创建单独的显式选项，可以更容易地建立文档。store_const 动作就是要达到这个目的。

import optparse

parser = optparse.OptionParser()
parser.add_option('--earth', action="store_const",
				  const='earth', dest='element',
				  default='earth',
				  )
parser.add_option('--air', action="store_const",
				  const='air', dest='element',
				  )
parser.add_option('--water', action="store_const",
				  const='water', dest='element',
				  )
parser.add_option('--fire', action="store_const",
				  const='fire', dest='element',
				  )

options, args = parser.parse_args()

print options.element

    store_const 动作将应用中的一个常量与用户指定的选项相关联。可以配置多个选项对相同的 dest 名存储不同的常量值，这样一来，应用只需检查一个设置。
    2. 布尔标志
    布尔选项使用特使动作来实现，用来存储 true 和 false 常量值。

import optparse

parser = optparse.OptionParser()
parser.add_option('-t', action="store_true",
				  default=False, dest='flag')
parser.add_option('-f', action="store_false",
				  default=False, dest='flag')

options, args = parser.parse_args()

print 'Flag:', options.flag

    通过将 dest 名配置为相同的值，可以创建同一个标志的 true 和 false 版本。
    3. 重复选项
    处理重复的选项有 3 种方法：覆盖、追加和统计。默认做法是覆盖所有现有的值，所以会使用最后指定的选项。store 动作就采用这种方式。
    通过使用 append 动作，可以在选项重复时累积值，创建一个值列表。允许多个响应时，追加模式会很有用，因为各个响应可以单独列出。

import optparse

parser = optparse.OptionParser()
parser.add_option('-o', action="append", dest='outputs', default=[])
options, args = parser.parse_args()
print options.outputs

    命令行上指定值的顺序会保留，因为这个顺序可能对应用很重要。
    有时，知道一个选项指定了多少次就足够了，而不需要相关的值。例如，很多应用允许用户重复 -v 选项，来提高其输出的详细等级。每次这个选项出现时，count 动作会让一个值递增。

import optparse

parser = optparse.OptionParser()
parser.add_option('-v', action="count", dest='verbosity', default=1)
parser.add_option('-q', action="store_const", const=0, dest='verbosity')
options, args = parser.parse_args()
print options.verbosity

    由于 -v 选项不带任何参数，可以使用语法 -vv 重复，也可以重复单个选项。
    4. 回调
    除了直接保存选项参数，还可以为选项定义回调函数，在命令行上遇到选项时就会调用这些回调函数。选项的回调函数有 4 个参数：导致回调的 Option 实例、来自命令行的选项串、与选项关联的参数值，以及完成解析工作的 OptionParser 实例。

import optparse

def flag_callback(option, opt_str, value, parser):
	print 'flag_callback:'
	print '\toption:', repr(option)
	print '\topt_str:', opt_str
	print '\tvalue:', value
	print '\tparser:', parser
	return

def with_callback(option, opt_str, value, parser):
	print 'with_callback:'
	print '\toption:', repr(option)
	print '\topt_str:', opt_str
	print '\tvalue:', value
	print '\tparser:', parser
	return

parser = optparse.OptionParser()
parser.add_option('--flag', action="callback",
                  callback=flag_callback)
parser.add_option('--with', action="callback",
				  callback=with_callback,
				  type="string",
				  help="Include optional feature")

parser.parse_args(['--with', 'foo', '--flag'])

    在这个例子中，--with 选项配置为有一个字符串参数（也支持其他类型，如整数和浮点数）。
    可以使用 nargs 选项配置回调有多个参数。

import optparse

def with_callback(option, opt_str, value, parser):
	print 'with_callback:'
	print '\toption:', repr(option)
	print '\topt_str:', opt_str
	print '\tvalue:', value
	print '\tparser:', parser
	return

parser = optparse.OptionParser()
parser.add_option('--with', action="callback",
				  callback=with_callback,
				  type="string",
				  nargs=2,
				  help="Include optional feature")

parser.parse_args(['--with', 'foo', 'bar'])

    在这里，参数会通过 value 参数作为一个 tuple 传递给回调函数。
帮助消息
