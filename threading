[Python标准库]threading——管理并发操作
    作用：建立在 thread 模块之上，可以更容易地管理多个执行线程。
    Python 版本：1.5.2 及以后版本
    通过使用线程，程序可以在同一个进程空间并发地运行多个操作。threading 模块建立在 thread 的底层特性基础之上，可以更容易地完成线程处理。
Thread 对象
    要使用 Thread，最简单的方法就是用一个目标函数实例化一个 Thread 对象，并调用 start() 让它开始工作。

import threading

def worker():
    """thread worker function"""
    print 'Worker'
    return

threads = []
for i in range(5):
    t = threading.Thread(target=worker)
    threads.append(t)
    t.start()

    输出有 5 行，每一行都是“Worker”。
    如果能够创建一个线程，并向它传递参数告诉它要完成什么工作，这会很有用。任何类型的对象都可以作为参数传递到线程。下面的例子传递了一个数，线程将打印出这个数。

import threading

def worker(num):
    """thread worker function"""
    print 'Worker: %s' % num
    return

threads = []
for i in range(5):
    t = threading.Thread(target=worker, args=(i,))
    threads.append(t)
    t.start()

    现在整数参数会包含在各线程打印的消息中。
确定当前线程
    使用参数来标识或命名线程很麻烦，也没有必要。每个 Thread 实例都有一个名称，它有一个默认值，可以在创建线程时改变。如果服务器进程由处理不同操作的多个服务线程构成，在这样的服务器进程中，对线程命名就很有用。

import threading
import time

def worker():
    print threading.currentThread().getName(), 'Starting'
    time.sleep(2)
    print threading.currentThread().getName(), 'Exiting'

def my_service():
    print threading.currentThread().getName(), 'Starting'
    time.sleep(3)
    print threading.currentThread().getName(), 'Exiting'

t = threading.Thread(name='my_service', target=my_service)
w = threading.Thread(name='worker', target=worker)
w2 = threading.Thread(target=worker) # use default name

w.start()
w2.start()
t.start()

    调试输出的每一行中包含有当前线程的名称。线程名称列为“Thread-1”的行对应未命名的线程 w2。
    大多数程序并不使用 print 来进行调试。logging 模块支持将线程名嵌入到各个日志消息中（使用格式化代码 %(threadName)s）。通过将线程名包含在日志消息中，这样就能跟踪这些消息的来源。

import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG,
    format='[%(levelname)s] (%(threadName)-10s) %(message)s',
    )

def worker():
    logging.debug('Starting')
    time.sleep(2)
    logging.debug('Exiting')

def my_service():
    logging.debug('Starting')
    time.sleep(3)
    logging.debug('Exiting')

t = threading.Thread(name='my_service', target=my_service)
w = threading.Thread(name='worker', target=worker)
w2 = threading.Thread(target=worker) # use default name

w.start()
w2.start()
t.start()

    logging 也是线程安全的，所以来自不同线程的消息在输出中会有所区分。
守护与非守护线程
    到目前为止，示例程序都隐含地等待所有线程完成工作之后才退出。程序有时会创建一个线程作为守护线程（daemon），这个线程可以一直运行而不阻塞主程序退出。如果一个服务无法用一种容易的方法来中断线程，或者希望线程工作到一半时中止而不损失或破坏数据（如为一个服务监控工具生成“心跳”的线程），对于这些服务，使用守护线程就很有用。要标志一个线程为守护线程，需要调用其 setDaemon() 方法并提供参数 True。默认情况下线程不作为守护线程。

import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG,
    format='(%(threadName)-10s) %(message)s',
    )

def daemon():
    logging.debug('Starting')
    time.sleep(2)
    logging.debug('Exiting')

d = threading.Thread(name='daemon', target=daemon)
d.setDaemon(True)

def non_daemon():
    logging.debug('Starting')
    logging.debug('Exiting')

t = threading.Thread(name='non-daemon', target=non_daemon)

d.start()
t.start()

    输出中没有守护线程的“Exiting”消息，因为在守护线程从其 2 秒的睡眠时间唤醒之前，所有非守护线程（包括主线程）已经退出。
    要等待一个守护线程完成工作，需要使用 join() 方法。

import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG,
    format='(%(threadName)-10s) %(message)s',
    )

def daemon():
    logging.debug('Starting')
    time.sleep(2)
    logging.debug('Exiting')

d = threading.Thread(name='daemon', target=daemon)
d.setDaemon(True)

def non_daemon():
    logging.debug('Starting')
    logging.debug('Exiting')

t = threading.Thread(name='non-daemon', target=non_daemon)

d.start()
t.start()

d.join()
t.join()

    使用 join() 等待守护线程退出，这意味着它将有机会生成它的“Exiting”消息。
    默认情况下，join() 会无限阻塞。还可以传入一个浮点数值，表示等待线程变为不活动所需的时间（秒数）。即使线程在这个时间段内为完成，join() 也会返回。

import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG,
    format='(%(threadName)-10s) %(message)s',
    )

def daemon():
    logging.debug('Starting')
    time.sleep(2)
    logging.debug('Exiting')

d = threading.Thread(name='daemon', target=daemon)
d.setDaemon(True)

def non_daemon():
    logging.debug('Starting')
    logging.debug('Exiting')

t = threading.Thread(name='non-daemon', target=non_daemon)

d.start()
t.start()

d.join(1)
print 'd.isAlive()', d.isAlive()
t.join()

    由于传入的超时时间小于守护线程睡眠的时间，所以 join() 返回之后这个线程仍“存活”。
列举所有线程
    没有必要为所有守护线程维护一个显式句柄来确保它们在退出主进程之前已经完成。enumerate() 会返回活动 Thread 实例的一个列表。这个列表也包括当前线程，由于等待当前线程结束会引入一种死锁情况，所以必须将其跳过。

import logging
import threading
import time
import random

logging.basicConfig(
    level=logging.DEBUG,
    format='(%(threadName)-10s) %(message)s',
    )

def worker():
    """thread worker function"""
    t = threading.currentThread()
    pause = random.randint(1, 5)
    logging.debug('sleeping %s', pause)
    time.sleep(pause)
    logging.debug('ending')
    return

for i in range(3):
    t = threading.Thread(target=worker)
    t.setDaemon(True)
    t.start()

main_thread = threading.currentThread()
for t in threading.enumerate():
    if t is main_thread:
        continue
    logging.debug('joining %s', t.getName())
    t.join()

    由于工作线程睡眠的时间随机，所以这个线程的输出可能有变化。
派生线程
    开始时，Thread 要完成一些基本初始化，然后调用其 run() 方法，这会调用传递到构造函数的目标函数。要创建一个子类，需要覆盖 run() 来完成所需的工作。

import logging
import threading

logging.basicConfig(
    level=logging.DEBUG,
    format='(%(threadName)-10s) %(message)s',
    )

class MyThread(threading.Thread):

    def run(self):
        logging.debug('running')
        return

for i in range(5):
    t = MyThread()
    t.start()

    由于传递到 Thread 构造函数的 args 和 kwargs 值保存在私有变量中（这些变量名都有前缀 '__'），所以不能很容易地从子类访问这些值。要向一个定制的线程类型传递参数，需要重新定义构造函数，将这些值保存在子类可见的一个实例属性中。

import logging
import threading

logging.basicConfig(
    level=logging.DEBUG,
    format='(%(threadName)-10s) %(message)s',
    )

class MyThreadWithArgs(threading.Thread):

    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        threading.Thread.__init__(self, group=group,
                                  target=target,
                                  name=name,
                                  verbose=verbose)
        self.args = args
        self.kwargs = kwargs
        return

    def run(self):
        logging.debug('running with %s and %s',
                      self.args, self.kwargs)
        return

for i in range(5):
    t = MyThreadWithArgs(args=(i,),
                         kwargs={'a':'A', 'b':'B'})
    t.start()

    MyThreadWithArgs 使用的 API 与 Thread 相同，不过这个类可以轻松地修改构造函数方法，取更多或与线程用途更直接相关的不同参数，这一点类似于其他定制类。
定时器线程
    有时出于某种原因需要派生 Thread，Timer 就是这样一个例子，Timer 也包含在 threading 中。Timer 在一个延迟之后开始工作，可以在这个延迟期间内的任意时刻取消。

import logging
import time
import threading

logging.basicConfig(
    level=logging.DEBUG,
    format='(%(threadName)-10s) %(message)s',
    )

def delayed():
    logging.debug('worker running')
    return

t1 = threading.Timer(3, delayed)
t1.setName('t1')
t2 = threading.Timer(3, delayed)
t2.setName('t2')

logging.debug('starting timers')
t1.start()
t2.start()

logging.debug('waiting before canceling %s', t2.getName())
time.sleep(2)
logging.debug('canceling %s', t2.getName())
t2.cancel()
logging.debug('done')

    第二个定时器永远不会运行，第一个定时器会在其余的主线程完成之后运行。由于这不是一个守护线程，主线程完成时它会隐式退出。
线程间传送信号
    尽管使用多线程的目的是并发地运行单个操作，不过有时也需要在两个或多个线程中同步操作。事件对象是实现线程间安全通信的一种简单方法。Event 管理一个内部标志，调用者可以用 set() 和 clear() 方法控制这个标志。其他线程可以使用 wait() 暂停，直到设置这个标志，其效果就是在允许继续之前阻塞线程的运行。

import logging
import time
import threading

logging.basicConfig(
    level=logging.DEBUG,
    format='(%(threadName)-10s) %(message)s',
    )

def wait_for_event(e):
    """Wait for the event to be set before doing anything"""
    logging.debug('wait_for_event starting')
    event_is_set = e.wait()
    logging.debug('event set: %s', event_is_set)

def wait_for_event_timeout(e, t):
    """Wait t seconds and then timeout"""
    while not e.isSet():
        logging.debug('wait_for_event_timeout starting')
        event_is_set = e.wait(t)
        logging.debug('event set: %s', event_is_set)
        if event_is_set:
            logging.debug('processing event')
        else:
            logging.debug('doing other work')

e = threading.Event()
t1 = threading.Thread(name='block',
                      target=wait_for_event,
                      args=(e,))
t1.start()

t2 = threading.Thread(name='nonblock',
                      target=wait_for_event_timeout,
                      args=(e, 2))
t2.start()

logging.debug('Waiting before calling Event.set()')
time.sleep(3)
e.set()
logging.debug('Event is set')

    wait() 方法取一个参数，表示在超时之前等待事件的时间（秒数）。它会返回一个布尔值，指示事件是否已设置，从而使调用者知道 wait() 为什么返回。可以对事件单独地使用 isSet() 方法而不必担心阻塞。
    在这个例子中，wait_for_event_timeout() 将检查事件状态而不会无限阻塞。wait_for_event() 在 wait() 调用处阻塞，事件状态改变之前它不会返回。
控制资源访问
    除了同步线程操作之外，还有一点很重要，要能够控制对共享资源的访问，从而避免破坏或丢失数据。Python 的内置数据结构（列表、字典等）是线程安全的，这是 Python 使用原子字节码来管理这些数据结构的一个副作用（更新过程中不会释放 GIL）。Python 中实现的其他数据结构或更简单的类型（如整数和浮点数）则没有这个保护。要保证同时安全地访问一个对象，可以使用一个 Lock 对象。

import logging
import time
import random
import threading

logging.basicConfig(
    level=logging.DEBUG,
    format='(%(threadName)-10s) %(message)s',
    )

class Counter(object):
    def __init__(self, start=0):
        self.lock = threading.Lock()
        self.value = start
    def increment(self):
        logging.debug('Waiting for lock')
        self.lock.acquire()
        try:
            logging.debug('Acquired lock')
            self.value = self.value + 1
        finally:
            self.lock.release()

def worker(c):
    for i in range(2):
        pause = random.random()
        logging.debug('Sleeping %0.02f', pause)
        time.sleep(pause)
        c.increment()
    logging.debug('Done')

counter = Counter()
for i in range(2):
    t = threading.Thread(target=worker, args=(counter,))
    t.start()

logging.debug('Waiting for worker threads')
main_thread = threading.currentThread()
for t in threading.enumerate():
    if t is not main_thread:
        t.join()
logging.debug('Counter: %d', counter.value)

    在这个例子中，worker() 函数使一个 Counter 实例递增，这个实例管理着一个 Lock，来避免两个线程同时改变其内部状态。如果没有使用 Lock，就有可能丢失一次对 value 属性的修改。
    要查看是否有另一个线程请求这个锁而不影响当前线程，可以向 acquire() 的 blocking 参数传入 False。在下一个例子中，worker() 想要得到 3 次锁，并统计为得到锁所尝试的次数。与此同时，lock_holder() 在占有和释放锁之间循环，每个状态会短暂的暂停，以模拟负载情况。

import logging
import time
import threading

logging.basicConfig(
    level=logging.DEBUG,
    format='(%(threadName)-10s) %(message)s',
    )

def lock_holder(lock):
    logging.debug('Starting')
    while True:
        lock.acquire()
        try:
            logging.debug('Holding')
            time.sleep(0.5)
        finally:
            logging.debug('Not holding')
            lock.release()
    return

def worker(lock):
    logging.debug('Starting')
    num_tries = 0
    num_acquires = 0
    while num_acquires < 3:
        time.sleep(0.5)
        logging.debug('Trying to acquire')
        have_it = lock.acquire()
        try:
            num_tries += 1
            if have_it:
                logging.debug('Iteration %d: Acquired',
                              num_tries)
                num_acquires += 1
            else:
                logging.debug('Iteration %d: Not acquired',
                              num_tries)
        finally:
            if have_it:
                lock.release()
    logging.debug('Done after %d iterations', num_tries)

lock = threading.Lock()

holder = threading.Thread(target=lock_holder,
                          args=(lock,),
                          name='LockHolder')
holder.setDaemon(True)
holder.start()
worker = threading.Thread(target=worker,
                          args=(lock,),
                          name='Worker')
worker.start()

    worker() 需要超过 3 次迭代才能得到 3 次锁。