[Python标准库]fractions——有理数
    作用：实现了一个类来处理有理数。
    Python 版本：2.6 及以后版本
    Fraction 类基于 numbers 模块中 Rational 定义的 API，实现了有理数的数值运算。
创建 Fraction 实例
    与 decimal 模块类似，可以采用多种方式创建新值。一种简便的方式是由单独的分子和分母值来创建，如下所示。

import fractions

for n, d in [ (1, 2), (2, 4), (3, 6) ]:
    f = fractions.Fraction(n, d)
    print '%s/%s = %s' % (n, d, f)

    计算新值时要保持最小公分母。
    创建 Fraction 的另一种方法是使用 <namerator>/<denominator> 字符串表示：

import fractions

for s in [ '1/2', '2/4', '3/6' ]:
    f = fractions.Fraction(s)
    print '%s = %s' % (s, f)

    会解析这个字符串，找出分子和分母值。
    字符串还可以使用更常用的小数或浮点数记法，即用一个小数点分隔的一系列数字。

import fractions

for s in [ '0.5', '1.5', '2.0' ]:
    f = fractions.Fraction(s)
    print '%s = %s' % (s, f)

    浮点数值表示的分子和分母值会自动计算。
    还有一些方法可以从有理数值的其他表示（如 float 或 Decimal）直接创建 Fraction 实例。

import fractions

for v in [ 0.1, 0.5, 1.5, 2.0 ]:
    print '%s = %s' % (v, fractions.Fraction.from_float(v))

    不能精确表示的浮点数值可能会得到出乎意料的结果。
    使用值的 decimal 表示则会给出所期望的结果。

import decimal
import fractions

for v in [ decimal.Decimal('0.1'),
           decimal.Decimal('0.5'),
           decimal.Decimal('1.5'),
           decimal.Decimal('2.0'),
           ]:
    print '%s = %s' % (v, fractions.Fraction.from_decimal(v))

    decimal 的内部实现不存在标准浮点数表示的精度错误。
算术运算
    一旦实例化分数，就可以在数学表达式中使用。

import fractions

f1 = fractions.Fraction(1, 2)
f2 = fractions.Fraction(3, 4)

print '%s + %s = %s' % (f1, f2, f1 + f2)
print '%s - %s = %s' % (f1, f2, f1 - f2)
print '%s * %s = %s' % (f1, f2, f1 * f2)
print '%s / %s = %s' % (f1, f2, f1 / f2)

    分数运算支持所有标准操作符。
近似值
    Fraction 有一个有用的特性，它能够将一个浮点数转换为一个近似的有理数值。

import fractions
import math

print 'PI       =', math.pi

f_pi = fractions.Fraction(str(math.pi))
print 'No limit =', f_pi

for i in [ 1, 6, 11, 60, 70, 90, 100 ]:
    limited = f_pi.limit_denominator(i)
    print '{0:8} = {1}'.format(i, limited)

    可以通过限制分母大小来控制这个分数的值。