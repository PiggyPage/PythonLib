[Python标准库]functools——管理函数的工具
    作用：处理其他函数的函数。
    Python 版本：2.5 及以后版本
    functools 模块提供了一些工具来调整或扩展函数和其他可回调对象，而不必完全重写。
修饰符
    functools 模块提供的主要工具是 partial 类，它可以用来“包装”一个有默认参数的可回调对象。得到的对象本身是可回调的，可以看作就像是原来的函数。它与原函数的参数完全相同，调用时也可以提供额外的位置或命名参数。可以使用 partial 而不是 lambda 为函数提供默认参数，有些参数可以不指定。
    1. partial 对象
    下面这个例子显示了函数 myfunc() 的两个简单的 partial 对象。show_details() 的输出包含这个部分对象的 func、args 和 keywords 属性。
    
import functools

def myfunc(a, b=2):
    """Docstring for myfunc()."""
    print '  called myfunc with:', (a, b)
    return
    
def show_details(name, f, is_partial=False):
    """Show details of a callable object."""
    print '%s:' % name
    print '  object:', f
    if not is_partial:
        print '  __name__:', f.__name__
    if is_partial:
        print '  func:', f.func
        print '  args:', f.args
        print '  keywords:', f.keywords
    return
    
show_datails('myfunc', myfunc)
myfunc('a', 3)
print

# Set a different default value for 'b', but require
# the caller to provide 'a'.
p1 = functools.partial(myfunc, b=4)
show_details('partial with named default', p1, True)
p1('passing a')
p1('override b', b=5)
print

# Set default value for both 'a' and 'b'.
p2 = functools.partial(myfunc, 'default a', b=99)
show_details('partial with named default', p2, True)
p2()
p2(b='override b')
print

print 'Insufficient arguments:'
p1()

    在这个例子的最后，调用了之前创建的第一个 partial，但没有为 a 传入一个值，这就导致一个异常。
    2. 获取函数属性
    默认情况下，partial 对象没有 __name__ 或 __doc__ 属性，如果没有这些属性，修饰的函数将更难调试。使用 update_wrapper() 可以从原函数将属性复制或添加到 partial 对象。
    
import functools

def myfunc(a, b=2):
    """Docstring for myfunc()."""
    print '  called myfunc with:', (a, b)
    return
    
def show_details(name, f):
    """Show details of a callable object."""
    print '%s:" % name
    print '  object:', f
    print ' __name__:',
    try:
        print f.__name__
    except AttributeError:
        print '(no __name__)'
    print '  __doc__', repr(f.__doc__)
    print
    return
    
show_details('myfunc', myfunc)

p1 = functools.partial(myfunc, b=4)
show_details('raw wrapper', p1)

print 'Updating wrapper:'
print '  assign:', functools.WRAPPER_ASSIGNMENTS
print '  update:', functools.WRAPPER_UPDATES

functools.update_wrapper(p1, myfunc)
show_details('updated wrapper', p1)

    添加到包装器的属性在 WRAPPER_ASSIGNMENTS 中定义，而 WRAPPER_UPDATES 列出了要修改的值。
