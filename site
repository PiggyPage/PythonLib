[Python标准库]site——全站点配置
    site 模块处理站点特定的配置，特别是导入路径。
导入路径
    每次解释器启动时会自动导入 site。导入时，会用站点特定的名称扩展 sys.path，这个名称通过组合前缀值（sys.prefix 和 sys.exec_prefix）与一些后缀值来构造。使用的前缀值将保存在模块级变量 PREFIXES 中，以便以后引用。在 Windows 下，后缀值是一个空串和 lib/site-packages。对于类 UNIX 平台，后缀值是 lib/python$version/site-packages（其中 $version 要替换为解释器的主版本号和次版本号，如 2.7）和 lib/site-python。

import sys
import os
import platform
import site

if 'Windows' in platform.platform():
	SUFFIXES = [
		'',
		'lib/site-packages',
		]
else:
	SUFFIXES = [
		'lib/python%s/site-packages' % sys.version[:3],
		'lib/site-python',
		]

print 'Path prefixes:'
for p in site.PREFIXES:
	print '  ', p

for prefix in sorted(set(site.PREFIXES)):
	print 
	print prefix
	for suffix in SUFFIXES:
		print
		print ' ', suffix
		path = os.path.join(prefix, suffix).rstrip(os.sep)
		print '   exists :', os.path.exists(path)
		print '   in path:', path in sys.path

    对组合得到的各个路径进行测试，将确实存在的路径添加到 sys.path。
用户目录
    除了全局的 site-packages 路径，site 还负责向导入路径添加用户特定的位置。用户特定的路径都基于 USER_BASE 目录，这通常位于当前用户拥有（而且可写）的部分文件系统。USER_BASE 目录中有一个 site-packages 目录，其中包含的路径可以用 USER_SITE 访问。

import site

print 'Base:', site.USER_BASE
print 'Site:', site.USER_SITE

    USER_SITE 路径名使用同样的平台特定后缀（如前所述）来创建。

$ python test.py 
Base: /home/rendp/.local
Site: /home/rendp/.local/lib/python2.7/site-packages

    用户基目录可以通过 PYTHONUSERBASE 环境变量设置，并有平台特定的默认值（对于 Windows 是 ~/Python$version/site-packages，对于非 Windows 平台为 ~/.local）。

$ PYTHONUSERBASE=/tmp/$USER python test.py
Base: /tmp/rendp
Site: /tmp/rendp/lib/python2.7/site-packages

    一些可能出现安全问题的情况下会禁用用户目录（例如，如果运行进程的用户或组 id 不同于 原先启动这个进程的实际用户）。应用可以通过查看 ENABLE_USER_SITE 来检查这个设置。

import site

status = {
	None:'Disabled for security',
	True:'Enabled',
	False:'Disabled by command-line option',
	}

print 'Flag   :', site.ENABLE_USER_SITE
print 'Meaning:', status[site.ENABLE_USER_SITE]

    还可以在命令行用 -s 显式禁用用户目录。

$ python test.py
Flag   : True
Meaning: Enabled

$ python -s test.py
Flag   : False
Meaning: Disabled by command-line option

路径配置文件
    随着路径添加到导入路径，还会在这些路径中扫描路径配置文件（path configuration file）。路径配置文件是一个纯文本文件，扩展名为 .pth。文件中的每一行可以有以下 4 种形式：
    (1) 要添加到导入路径的另一个位置的完全或相对路径。
    (2) 一个要执行的 Python 语句。所有这样的行都必须以一个 import 语句开头。
    (3) 空行，这些行会被忽略。
    (4) 以 # 开头的行，要处理为注释并被忽略。
    路径配置文件可以用来扩展导入路径，来查看不能自动添加的路径。例如，Distribute 包使用 python setup.py develop 以开发模式安装一个包时会向 easy-install.pth 添加一个路径。
    扩展 sys.path 的函数是公共的，可以在示例程序中用来显示路径配置文件如何工作。给定一个名为 with_modules 的目录，其中包含文件 mymodule.py，以下给出使用这个 print 语句的结果。它会显示模块如何导入。

import os
print 'Loaded', __name__, 'from', __file__[len(os.getcwd())+1:]

    下面这个脚本显示了 addsitedir() 如何扩展导入路径，使解释器能够找到所需的模块。

import site
import os
import sys

script_directory = os.path.dirname(__file__)
module_directory = os.path.join(script_directory, sys.argv[1])

try:
	import mymodule
except ImportError, err:
	print 'Could not import mymodule:', err

print
before_len = len(sys.path)
site.addsitedir(module_directory)
print 'New paths:'
for p in sys.path[before_len:]:
	print p.replace(os.getcwd(), '.') # shorten dirname

print
import mymodule

    将包含模块的目录添加到 sys.path 之后，脚本可以毫无问题地导入 mymodule。

$ python test.py with_modules
Could not import mymodule: No module named mymodule

New paths:
./with_modules

Loaded mymodule from with_modules/mymodule.py

    addsitedir() 完成的路径调整不只是向 sys.path 追加参数。如果为 addsitedir() 提供的目录包括与模式 *.pth 匹配的文件，它们会作为路径配置文件加载。例如，如果 with_pth/pymotw.pth 包含以下内容：

# Add a single subdirectory to the path.
./subdir

    而且 mymodule.py 已经复制为 with_pth/subdir/mymodule.py，则可以通过添加 with_pth 作为一个站点目录将这个模块导入。即使模块不在那个目录中也是可以的，因为 with_pth 和 with_pth/subdir 都会添加到导入路径。

$ python test.py with_pth
Could not import mymodule: No module named mymodule

New paths:
./with_pth
./with_pth/subdir

Loaded mymodule from with_pth/subdir/mymodule.py

    如果一个站点目录包含多个 .pth 文件，会按字母顺序进行处理。

$ ls -F multiple_pth
a.pth  b.pth  from_a/  from_b/

$ cat multiple_pth/a.pth
./from_a

$ cat multiple_pth/b.pth
./from_b

    在这里，模块会在 multiple_pth/from_a 中找到，因为 a.pth 比 b.pth 先读取。

$ python test.py multiple_pth
Could not import mymodule: No module named mymodule

New paths:
./multiple_pth
./multiple_pth/from_a
./multiple_pth/from_b

Loaded mymodule from multiple_pth/from_a/mymodule.py

定制站点配置
