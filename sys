[Python标准库]sys——系统特定的配置
    作用：提供系统特定的配置和操作。
    Python 版本：1.4 及以后版本
    sys 模块包括一组服务，可以探查或修改解释器的运行时配置以及资源，从而与当前程序之外的操作环境交互。
解释器设置
    sys 包含有一些属性和函数，可以访问解释器的编译时或运行时配置设置。
    1. 构建时版本信息
    构建 C 解释器所用的版本可以有多种形式。sys.version 是一个人类可读的串，通常包含完整的版本号，以及有关构建日期、编译器和平台的信息。sys.hexversion 可以更容易地检查解释器版本，因为它是一个简单的整数。使用 hex() 格式化时，可以清楚地看出，sys.hexversion 的某些部分来自更可读的 sys.version_info 中同样可见的版本信息（这是一个包含 5 部分的元组，只表示版本号）。
    对于加入构建中的源文件，有关的更多特定信息可以从 sys.subversion 元组找到，其中包括签出和构建的具体分支及版本修订。当前解释器使用的 C API 版本保存在 sys.api_version 中。

import sys

print 'Version info:'
print
print 'sys.version      =', repr(sys.version)
print 'sys.version_info =', sys.version_info
print 'sys.hexversion   =', hex(sys.hexversion)
print 'sys.subversion   =', sys.subversion
print 'sys.api_version  =', sys.api_version

    所有这些值都依赖于运行示例程序的具体解释器。

$ python test.py
Version info:

sys.version      = '2.7.6 (default, Jun 22 2015, 18:00:18) \n[GCC 4.8.2]'
sys.version_info = sys.version_info(major=2, minor=7, micro=6, releaselevel='final', serial=0)
sys.hexversion   = 0x20706f0
sys.subversion   = ('CPython', '', '')
sys.api_version  = 1013

    用来构建解释器的操作系统平台保存为 sys.platform。

import sys

print 'This interpreter was built for:', sys.platform

    对于大多数 UNIX 系统，这个值由命令 uname -s 的输出与 uname -r 中版本的第一部分组合而成。对于其他操作系统，则有一个硬编码的值表。

$ python test.py
This interpreter was built for: linux2

    2. 命令行选项
    CPython 解释器接受一些命令行选项来控制解释器的行为；这些选项如表 1.71 所列。
    -----------------------------------------------------------------
        选  项    |              含  义
    -----------------------------------------------------------------
          -B      |    导入时不写入 .py[co] 文件
    -----------------------------------------------------------------
          -d      |    调试解析器的输出
    -----------------------------------------------------------------
          -E      |    忽略 PYTHON* 环境变量（如 PYTHONPATH）
    -----------------------------------------------------------------
          -i      |    运行脚本后交互式检查
    -----------------------------------------------------------------
          -O      |    对生成的字节码稍做优化
    -----------------------------------------------------------------
         -OO      |    除了 -O 优化外，还会删除 docstring
    -----------------------------------------------------------------
          -s      |    不向 sys.path 添加用户站点目录
    -----------------------------------------------------------------
          -S      |    不在初始化时运行“import site”
    -----------------------------------------------------------------
          -t      |    发出警告，指出 tab 使用不一致
    -----------------------------------------------------------------
         -tt      |    发出错误，指出 tab 使用不一致
    -----------------------------------------------------------------
          -v      |    详细显示
    -----------------------------------------------------------------
          -3      |    关于 Python 3.x 不兼容性的警告
    -----------------------------------------------------------------
    其中一些选项可以用于程序，可以通过 sys.flags 来检查。

import sys

if sys.flags.debug:
	print 'Debuging'
if sys.flags.py3k_warning:
	print 'Warning about Python 3.x incompatibilities'
if sys.flags.division_warning:
	print 'Warning about division change'
if sys.flags.division_new:
	print 'New division behavior enabled'
if sys.flags.inspect:
	print 'Will enter interactive mode after running'
if sys.flags.optimize:
	print 'Optimizing byte-code'
if sys.flags.dont_write_bytecode:
	print 'Not writing byte-code files'
if sys.flags.no_site:
	print 'Not importing "site"'
if sys.flags.ignore_environment:
	print 'Ignore environment'
if sys.flags.tabcheck:
	print 'Checking for mixed tabs and spaces'
if sys.flags.verbose:
	print 'Verbose mode'
if sys.flags.unicode:
	print 'Unicode'

    可以尝试使用 sys_flags.py 来了解命令行选项如何映射到标志设置。

$ python -3 -S -E sys_flags.py 
Warning about Python 3.x incompatibilities
Warning about division change
Not importing "site"
Ignore environment
Checking for mixed tabs and spaces

    3. Unicode 默认编码
    要得到解释器使用的默认 Unicode 编码名，可以使用 getdefaulttencoding()。这个值在启动时由 site 设置，它会调用 sys.setdefaultencoding()，然后从 sys 的命名空间将其删除，避免再次调用。
    对于某些操作系统，内部编码默认设置和文件系统编码可能不同，所以要有另外一种方法获取文件系统设置。getfile systemencoding() 会返回一个操作系统特定的值（而不是文件系统特定的值）。

import sys

print 'Default encoding     :', sys.getdefaultencoding()
print 'File system encoding :', sys.getfilesystemencoding()

    大多数 Unicode 专家并不建议改变全局默认编码，而是推荐让应用显式地设置 Unicode。这种方法提供了两个好处：不同的数据源有不同的 Unicode 编码，这样可以更简洁地处理，而且可以减少对应用代码中编码的假设。

$ python test.py
Default encoding     : ascii
File system encoding : UTF-8

    4. 交互式提示语
    交互式解释器使用两种不同的提示语来指示默认输入级（ps1）和多行语句的“继续”（ps2）。这些值只用于交互式解释器。

>>> import sys
>>> sys.ps1
'>>> '
>>> sys.ps2
'... '
>>> 

    这两个提示语都可以改为一个不同的串。

>>> sys.ps1 = ':::'
:::sys.ps2 = '~~~'
:::for i in range(3):
~~~    print i
~~~
0
1
2
:::

    或者，只要一个对象可以转换为字符串（通过 __str__ ），就可以用作提示语。

import sys

class LineCounter(object):
	def __init__(self):
		self.count = 0
	def __str__(self):
		self.count += 1
		return '(%3d)> ' % self.count

    LineCounter 会记录它使用了多少次，所以提示语中的数字每次都会增加。

$ python
Python 2.7.6 (default, Jun 22 2015, 18:00:18) 
[GCC 4.8.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> from sys_ps1 import LineCounter
>>> import sys
>>> sys.ps1 = LineCounter()
(  1)> 
(  2)> 
(  3)> 

    5. 显示 hook
    每次用户进入一个表达式时交互式解释器都会调用 sys.displayhook。这个表达式的结果将作为唯一的参数传至函数。

import sys

class ExpressionCounter(object):
	def __init__(self):
		self.count = 0
		self.previous_value = self
	def __call__(self, value):
		print 
		print '  Previous:', self.previous_value
		print '  New     :', value
		print
		if value != self.previous_value:
			self.count += 1
			sys.ps1 = '(%3d)> ' % self.count
		self.previous_value = value
		sys.__displayhook__(value)

print 'installing'
sys.displayhook = ExpressionCounter()

    默认值（保存在 sys.__displayhook__ 中）将结果打印到标准输出（stdout），并把它保存到 .__builtin__._ 以便以后轻松引用。

$ python
Python 2.7.6 (default, Jun 22 2015, 18:00:18) 
[GCC 4.8.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys_displayhook
installing
>>> 1+2

  Previous: <sys_displayhook.ExpressionCounter object at 0xb72430ec>
  New     : 3

3
(  1)> 'abc'

  Previous: 3
  New     : abc

'abc'
(  2)> 'abc'

  Previous: abc
  New     : abc

'abc'
(  2)> 'abc' * 3

  Previous: abc
  New     : abcabcabc

'abcabcabc'
(  3)> 

    6. 安装位置
    只要系统上有一个合理的解释器路径，就可以由 sys.executable 得到具体的解释器程序的路径。这对于确保使用了正确的解释器可能很有用，而且还能对基于解释器位置可能设置的路径给出线索。
    sys.prefix 指示解释器安装的父目录。它通常包括 bin 和 lib 目录，分别存放可执行文件和已安装模块。

import sys

print 'Interpreter executable:', sys.executable
print 'Installation prefix   :', sys.prefix

运行时环境
    sys 提供了一些底层 API 与应用的外部系统交互，可以接受命令行参数、访问用户输入，以及向用户传递消息和状态值。
    1. 命令行参数
    解释器捕获的参数会由解释器处理，不会传递到它运行的程序。其余的所有选项和参数，包括脚本名本身，都保存到 sys.argv，以备程序使用。

import sys

print 'Arguments:', sys.argv

    在第 3 个例子中，-u 选项由解释器处理，不会传递到它运行的程序。

$ python sys_argv.py 
Arguments: ['sys_argv.py']
$ python sys_argv.py -v foo blah
Arguments: ['sys_argv.py', '-v', 'foo', 'blah']
$ python -u sys_argv.py
Arguments: ['sys_argv.py']

    2. 输入和输出流
    遵循 UNIX 编程范式，默认地 Python 程序可以访问 3 个文件描述符。

import sys

print >>sys.stderr, 'STATUS: Reading from stdin'

data = sys.stdin.read()

print >>sys.stderr, 'STATUS: Writing data to stdout'

sys.stdout.write(data)
sys.stdout.flush()

print >>sys.stderr, 'STATUS: Done'

    stdin 是读取输入的标准方式，通常从控制台读取，不过也可以通过管道从其他程序读取。stdout 是为用户写输出的标准方法（写至控制台），或者发送到管道线中的下一个程序。stderr 用于写警告或错误消息。

$ cat sys_stdio.py | python sys_stdio.py 
STATUS: Reading from stdin
STATUS: Writing data to stdout
import sys

print >>sys.stderr, 'STATUS: Reading from stdin'

data = sys.stdin.read()

print >>sys.stderr, 'STATUS: Writing data to stdout'

sys.stdout.write(data)
sys.stdout.flush()

print >>sys.stderr, 'STATUS: Done'STATUS: Done

    3. 返回状态
    要从一个程序返回一个退出码，需要向 sys.exit() 传递一个整数值。

import sys

exit_code = int(sys.argv[1])
sys.exit(exit_code)

    非 0 值表示程序退出时有一个错误。

$ python sys_exit.py 0 ; echo "Exited $?"
Exited 0
$ python sys_exit.py 1 ; echo "Exited $?"
Exited 1

内存管理和限制
    sys 包含一些函数来了解和控制内存使用。
    1. 引用数
    Python 使用引用计数（reference counting）和垃圾回收（garbage collection）来完成自动内存管理。一个对象的引用数降至 0 时，它会自动标志为回收。要查看一个现有对象的引用数，可以使用 getrefcount()。

import sys

one = []
print 'At start         :', sys.getrefcount(one)

two = one
print 'Second reference :', sys.getrefcount(one)

del two
print 'After del        :', sys.getrefcount(one)

    这个数实际上比期望的计数多 1，因为 getrefcount() 本身会维护对象的一个临时引用。

$ python sys_getrefcount.py 
At start         : 2
Second reference : 3
After del        : 2

    2. 对象大小
    了解一个对象有多少引用可以帮助发现环或内存泄露，不过还不足以确定哪些对象消耗的内存最多，这需要指定对象有多大。

import sys

class OldStyle:
	pass

class NewStyle(object):
	pass

for obj in [ [], (), {}, 'c', 'string', 1, 2.3,
			 OldStyle, OldStyle(), NewStyle, NewStyle(),
			 ]:
	print '%10s : %s' % (type(obj).__name__, sys.getsizeof(obj))

    getsizeof() 会报告一个对象的大小（单位为字节）。

$ python sys_getsizeof.py 
      list : 32
     tuple : 24
      dict : 136
       str : 22
       str : 27
       int : 12
     float : 16
  classobj : 48
  instance : 32
      type : 448
  NewStyle : 28

    为定制类报告的大小不包括属性值的大小。

import sys

class WithoutAttributes(object):
	pass

class WithAttributes(object):
	def __init__(self):
		self.a = 'a'
		self.b = 'b'
		return

without_attrs = WithoutAttributes()
print 'WithoutAttributes:', sys.getsizeof(without_attrs)

with_attrs = WithAttributes()
print 'WithAttributes:', sys.getsizeof(with_attrs)

    这可能会让人第消耗的内存量有一个错误的印象。

$ python sys_getsizeof_object.py 
WithoutAttributes: 28
WithAttributes: 28

    对于一个类所用的空间，要得到更全面的估计，模块提供了一个 __sizeof__() 方法来计算这个值，它会累计一个对象各个属性的大小。

import sys

class WithAttributes(object):
	def __init__(self):
		self.a = 'a'
		self.b = 'b'
		return
	def __sizeof__(self):
		return object.__sizeof__(self) + \
			sum(sys.getsizeof(v) for v in self.__dict__.values())

my_inst = WithAttributes()
print sys.getsizeof(my_inst)

    这个版本将对象的基本大小加上存储在内部 __dict__ 中的所有属性的大小来计算对象大小。

$ python sys_getsizeof_custom.py 
72

    3. 递归
    Python 应用中允许无限递归，这可能会引入解释器本身的栈溢出，导致奔溃。为了消除这种情况，解释器提供了一种方法，可以使用 setrecursionlimit() 和 getrecursionlimit() 控制最大递归深度。

import sys

print 'Initial limit:', sys.getrecursionlimit()

sys.setrecursionlimit(10)

print 'Modified limit:', sys.getrecursionlimit()

def generate_recursion_error(i):
	print 'generate_recursion_error(%s)' % i
	generate_recursion_error(i + 1)

try:
	generate_recursion_error(1)
except RuntimeError, err:
	print 'Caught exception:', err

    一旦达到递归限制，解释器会产生一个 RuntimeError 异常，使程序有机会处理这种情况。

$ python sys_recursionlimit.py 
Initial limit: 1000
Modified limit: 10
generate_recursion_error(1)
generate_recursion_error(2)
generate_recursion_error(3)
generate_recursion_error(4)
generate_recursion_error(5)
generate_recursion_error(6)
generate_recursion_error(7)
generate_recursion_error(8)
Caught exception: maximum recursion depth exceeded while getting the str of an object

    4. 最大值
    除了运行时可配置的值，sys 还包括一些变量，用来定义随系统不同而变化的一些类型的最大值。

import sys

print 'maxint    :', sys.maxint
print 'maxsize   :', sys.maxsize
print 'maxunicode:', sys.maxunicode

    maxint 是最大的可表示的常规整数。maxsize 是列表、字典、串或 C 解释器中 size 类型指示的其他数据结构的最大大小。maxunicode 是当前配置的解释器支持的最大整数 Unicode 值。

$ python sys_maximums.py 
maxint    : 2147483647
maxsize   : 2147483647
maxunicode: 1114111

    5. 浮点数
    结构 float_info 包含解释器所用的浮点类型表示（基于底层系统的 float 实现）的有关信息。

import sys

print 'Smallest difference (epsilon):', sys.float_info.epsilon
print
print 'Digits (dig)              :', sys.float_info.dig
print 'Mantissa digits (mant_dig):', sys.float_info.mant_dig
print
print 'Maximum (max):', sys.float_info.max
print 'Minimum (min):', sys.float_info.min
print
print 'Radix of exponents (radix):', sys.float_info.radix
print
print 'Maximum expont for radix (max_exp):', sys.float_info.max_exp
print 'Minimum expont for radix (min_exp):', sys.float_info.min_exp
print
print 'Max. exponent power of 10 (max_10_exp):', sys.float_info.max_10_exp
print 'Min. exponent power of 10 (min_10_exp):', sys.float_info.min_10_exp
print
print 'Rounding for addition (rounds):', sys.float_info.rounds

   这些值依赖于编译器和底层系统。

$ python sys_float_info.py 
Smallest difference (epsilon): 2.22044604925e-16

Digits (dig)              : 15
Mantissa digits (mant_dig): 53

Maximum (max): 1.79769313486e+308
Minimum (min): 2.22507385851e-308

Radix of exponents (radix): 2

Maximum expont for radix (max_exp): 1024
Minimum expont for radix (min_exp): -1021

Max. exponent power of 10 (max_10_exp): 308
Min. exponent power of 10 (min_10_exp): -307

Rounding for addition (rounds): 1

    6. 字节序
    byteorder 设置为内置字节序。

import sys

print sys.byteorder

    这个 w 值可以是 big 表示大端（big endian），或者是 little 表示小端（little endian）。

$ python sys_byteorder.py 
little

异常处理
    sys 包含一些特性来捕获和处理异常。
    1. 未处理异常
    很多应用的结构都包括一个主循环，将执行包围在一个全局异常处理程序中，来捕获较低层次未处理的错误。要达到同样的目的，另一种方法是将 sys.excepthook 设置为一个函数，它有 3 个参数（错误类型、错误值和 traceback），由这个函数来处理未处理的错误。

import sys

def my_excepthook(type, value, traceback):
	print 'Unhandled error:', type, value

sys.excepthook = my_excepthook

print 'Before exception'

raise RuntimeError('This is the error message')

print 'After exception'

    由于产生异常的代码行未包围在 try:except 块中，所以不会运行后面的 print 语句，尽管这里设置了异常 hook（except hook）。

$ python sys_excepthook.py 
Before exception
Unhandled error: <type 'exceptions.RuntimeError'> This is the error message

    2. 当前异常
    有些情况下，不论是处于代码简洁性考虑，还是为了避免与试图安装其自己的 excepthook 的库发生冲突，使用显式的异常处理程序更合适。在这些情况下，可以创建一个同样的处理函数，通过调用 exc_info() 来获取线程的当前异常，因此不需要显式地为它传递异常对象。
    exc_info() 的返回值是一个包含 3 个成员的元组，其中包含异常类、异常实例和 traceback。使用 exc_info() 要优于原来的形式（使用 exc_type、exc_value 和 exc_traceback），因为它是线程安全的。

import sys
import threading
import time

def do_something_with_exception():
	exc_type, exc_value = sys.exc_info()[:2]
	print 'Handling %s exception with message "%s" in %s' % \
		(exc_type.__name__, exc_value, threading.current_thread().name)

def cause_exception(delay):
	time.sleep(delay)
	raise RuntimeError('This is the error message')

def thread_target(delay):
	try:
		cause_exception(delay)
	except:
		do_something_with_exception()

threads = [ threading.Thread(target=thread_target, args=(0.3,)),
			threading.Thread(target=thread_target, args=(0.1,)),
			]

for t in threads:
	t.start()

for t in threads:
	t.join()

    这个例子通过忽略 exc_info() 的部分返回值，避免了在 traceback 对象和当前帧中一个局部变量之间引入循环引用。如果需要 traceback（例如，以便记入日志），可以显式地删除局部变量（使用 del）来避免循环。

$ python sys_exc_info.py 
Handling RuntimeError exception with message "This is the error message" in Thread-2
Handling RuntimeError exception with message "This is the error message" in Thread-1

    3. 之前的交互式异常
    交互式解释器中只有一个交互线程。该线程中的未处理异常会保存到 sys 的 3 个变量（last_type、last_value 和 last_traceback）中，从而能轻松地获取来完成调试。通过使用 pdb 中的事后剖析工具，则不再需要直接使用这些值。

$ python
Python 2.7.12 (default, Jul  1 2016, 15:12:24) 
[GCC 5.4.0 20160609] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> def cause_exception():
...     raise RuntimeError('This is the error message')
... 
>>> cause_exception()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in cause_exception
RuntimeError: This is the error message
>>> import pdb
>>> pdb.pm()
> <stdin>(2)cause_exception()
(Pdb) where
  <stdin>(1)<module>()
> <stdin>(2)cause_exception()
(Pdb) 

底层线程支持
    sys 包括一些底层函数来控制和调试线程行为。
    1. 检查间隔
    Python 2 使用了一个全局锁，以防止单独的线程破坏解释器状态。字节码执行会以一个固定的间隔暂停，解释器则检查是否需要执行某个信号处理器。在这个间隔检查期间，当前线程还会释放全局解释器锁（global interpreter lock，GIL），然后重新请求，使其他线程有机会先获得这个锁来得到执行权。
    默认的检查间隔是 100 字节码，可以用 sys.getcheckinterval() 得到当前值。用 sys.setcheckinterval() 改变这个间隔可能会对应用的性能产生影响，这取决于所完成的操作。

import sys
import threading
from Queue import Queue
import time

def show_thread(q, extraByteCodes):
	for i in range(5):
		for j in range(extraByteCodes):
			pass
		q.put(threading.current_thread().name)
	return

def run_threads(prefix, interval, extraByteCodes):
	print '%s interval = %s with %s extra operations' % \
		(prefix, interval, extraByteCodes)
	sys.setcheckinterval(interval)
	q = Queue()
	threads = [ threading.Thread(target=show_thread,
		name='%s T%s' % (prefix, i),
		args=(q, extraByteCodes)
		)
	for i in range(3)
	]
	for t in threads:
		t.start()
	for t in threads:
		t.join()
	while not q.empty():
		print q.get()
	print 
	return

run_threads('Default', interval=10, extraByteCodes=1000)
run_threads('Custom', interval=10, extraByteCodes=0)

    检查间隔小于线程中的字节码数时，解释器会把控制权交给另一个线程，让它运行一段时间。这从第一组输出情况可以看出，其中检查间隔设置为 100（默认值），对于 i 循环中的每一步要完成额外的 1000 次循环迭代。
    另一方面，如果检查间隔大于线程所执行的字节码数，而且这个线程处于另外某种原因不能交出控制权，线程会在间隔来之前完成工作。这种情况可以由第二个例子的队列中的 name 值顺序来说明。

$ python sys_checkinterval.py 
Default interval = 10 with 1000 extra operations
Default T0
Default T0
Default T0
Default T1
Default T2
Default T0
Default T0
Default T2
Default T1
Default T2
Default T1
Default T2
Default T1
Default T2
Default T1

Custom interval = 10 with 0 extra operations
Custom T0
Custom T0
Custom T0
Custom T0
Custom T0
Custom T1
Custom T1
Custom T1
Custom T1
Custom T1
Custom T2
Custom T2
Custom T2
Custom T2
Custom T2

    修改检查间隔并不像看上去那么有用。还有很多其他因素也会控制 Python 线程的上下文切换行为。例如，如果一个线程完成 I/O，它会释放 GIL，可能因此允许另一个线程接管执行。

import sys
import threading
from Queue import Queue
import time

def show_thread(q, extraByteCodes):
	for i in range(5):
		for j in range(extraByteCodes):
			pass
		#q.put(threading.current_thread().name)
		print threading.current_thread().name
	return

def run_threads(prefix, interval, extraByteCodes):
	print '%s interval = %s with %s extra operations' % \
		(prefix, interval, extraByteCodes)
	sys.setcheckinterval(interval)
	q = Queue()
	threads = [ threading.Thread(target=show_thread,
		name='%s T%s' % (prefix, i),
		args=(q, extraByteCodes)
		)
	for i in range(3)
	]
	for t in threads:
		t.start()
	for t in threads:
		t.join()
	while not q.empty():
		print q.get()
	print 
	return

run_threads('Default', interval=100, extraByteCodes=1000)
run_threads('Custom', interval=10, extraByteCodes=0)

    这个例子由第一个例子修改得来，以展示线程可以直接打印到 sys.stdout，而不是追加到一个队列。输出更不可预测。

$ python sys_checkinterval_io.py 
Default interval = 100 with 1000 extra operations
Default T0
Default T0
Default T0
Default T1
Default T1
Default T2
Default T1
Default T2
 Default T0
Default T1
Default T2
Default T2
Default T1
 Default T2
Default T0

Custom interval = 10 with 0 extra operations
Custom T0
Custom T0
Custom T0
Custom T0
Custom T0
Custom T2
Custom T2Custom T1

Custom T2Custom T1

Custom T2
Custom T2
 Custom T1
Custom T1
Custom T1

    2. 调试
    找出死锁可能是处理线程最困难的方面之一。sys._current_frames() 能有所帮助，它能准确地显示出线程在哪里停止。

#!/usr/bin/env python
# encoding: utf-8

import sys
import threading
import time

io_lock = threading.Lock()
blocker = threading.Lock()

def block(i):
	t = threading.current_thread()
	with io_lock:
		print '%s with ident %s going to sleep' % (t.name, t.ident)
	if i:
		blocker.acquired() # acquired but never released
		time.sleep(0.2)
	with io_lock:
		print t.name, 'finishing'
	return

# Create and start sereral threads that "block"
threads = [ threading.Thread(target=block, args=(i,)) for i in range(3) ]
for t in threads:
	t.setDaemon(True)
	t.start()

# Map the threads from their identifier to the thread object
threads_by_ident = dict((t.ident, t) for t in threads)

# Show where each thread is "blocked"
time.sleep(0.01)
with io_lock:
	for ident, frame in sys._current_frames().items():
		t = threads_by_ident.get(ident)
		if not t:
			# Main thread
			continue
		print t.name, 'stopped in', frame.f_code.co_name,
		print 'at line', frame.f_lineno, 'of', frame.f_code.co_filename
		
    sys._current_frames() 返回的字典以线程标识符为键，而不是线程名。需要稍做一点工作将这些标识符映射为线程对象。
    由于 Thread-1 没有休眠，在检查其状态之前它就已经完成。由于它不再是活动的，所以不会出现在输出中。Thread-2 请求锁阻塞器（blocker），然后睡眠很短的一段时间。与此同时，Thread-3 尝试请求阻塞器，不过无法得到，因为已经被 Thread-2 占用。
    
$ python sys_current_frames.py 
Thread-1 with ident -1222493376 going to sleep
Thread-1 finishing
Thread-2 with ident -1232078016 going to sleep
Thread-3 with ident -1222493376 going to sleep
Thread-3 stopped in updatecache at line 132 of /usr/lib/python2.7/linecache.py
Thread-2 stopped in updatecache at line 132 of /usr/lib/python2.7/linecache.py

模块和导入
    大多数 Python 程序最后都会是一个组合，包括多个模块以及导入这些模块的一个主应用。无论是否使用标准库的特性，还是将定制代码组织到单独的文件中以便于维护，理解和管理程序的依赖关系都是开发的一个重要方面。sys 包含了应用可用模块的有关信息，这些模块可能作为内置模块，也可能是导入的模块。sys 还定义了一些 hook 为特殊情况覆盖标准导入行为。
    1. 导入的模块
    sys.modules 是一个字典，将所导入模块的名字映射为包含具体代码的模块对象。

import sys
import textwrap

names = sorted(sys.modules.keys())
name_text = ', '.join(names)

print textwrap.fill(name_text, width=65)

    随着新模块的导入，sys.modules 的内容会改变。

$ python sys_modules.py 
UserDict, __builtin__, __main__, _abcoll, _codecs, _locale, _sre,
_sysconfigdata, _sysconfigdata_nd, _warnings, _weakref,
_weakrefset, abc, codecs, copy_reg, encodings,
encodings.__builtin__, encodings.aliases, encodings.codecs,
encodings.encodings, encodings.utf_8, errno, exceptions,
genericpath, linecache, os, os.path, posix, posixpath, re,
signal, site, sitecustomize, sre_compile, sre_constants,
sre_parse, stat, string, strop, sys, sysconfig, textwrap,
traceback, types, warnings, zipimport

    2. 内置模块
    Python 解释器编译时可用内置一些 C 模块，因此这些 C 模块不需要作为单独的共享库发布。这些模块不会出现在 sys.modules 管理的导入模块列表中，因为从理论上讲它们并不是导入的模块。要查找这些可用的内置模块，唯一的方法就是通过 sys.builtin_module_names。

import sys
import textwrap

names = sorted(sys.builtin_module_names)
name_text = ', '.join(names)

print textwrap.fill(name_text, width=65)

    这个脚本的输出可能会有变化，特别是用一个定制构建版本的解释器运行时。

$ python sys_builtins.py 
__builtin__, __main__, _ast, _bisect, _codecs, _collections,
_functools, _heapq, _io, _locale, _md5, _random, _sha, _sha256,
_sha512, _socket, _sre, _struct, _symtable, _warnings, _weakref,
array, binascii, cPickle, cStringIO, cmath, datetime, errno,
exceptions, fcntl, gc, grp, imp, itertools, marshal, math,
operator, posix, pwd, select, signal, spwd, strop, sys, syslog,
thread, time, unicodedata, xxsubtype, zipimport, zlib

    3. 导入路径
    模块的搜索路径作为一个 Python 列表保存在 sys.path 中。这个路径的默认内容包括启动应用所用脚本的目录和当前工作目录。

import sys

for d in sys.path:
	print d

    搜索路径中的第一个目录是示例脚本本身的主目录。后面是一些列平台特定的路径，其中可能安装有已编译的扩展模块（用 C 编写）。最后列出全局 site-packages 目录。

$ python sys_path_show.py 
/home/rendp/workspace/py
/usr/local/lib/python2.7/dist-packages/virtualenv-13.1.0-py2.7.egg
/usr/local/lib/python2.7/dist-packages/python_memcached-1.54-py2.7.egg
/usr/lib/python2.7/dist-packages
/usr/lib/python2.7
/usr/lib/python2.7/plat-i386-linux-gnu
/usr/lib/python2.7/lib-tk
/usr/lib/python2.7/lib-old
/usr/lib/python2.7/lib-dynload
/usr/local/lib/python2.7/dist-packages
/usr/lib/python2.7/dist-packages/PILcompat
/usr/lib/python2.7/dist-packages/gtk-2.0
/usr/lib/python2.7/dist-packages/ubuntu-sso-client

    通过将 shell 变量 PYTHONPATH 设置为一个用冒号分隔的目录列表，从而在启动解释器之前可以修改导入搜索路径列表。

$ PYTHONPATH=/my/private/site-package:/my/shared/site-package python sys_path_show.py 
/home/rendp/workspace/py
/usr/local/lib/python2.7/dist-packages/virtualenv-13.1.0-py2.7.egg
/usr/local/lib/python2.7/dist-packages/python_memcached-1.54-py2.7.egg
/usr/lib/python2.7/dist-packages
/my/private/site-package
/my/shared/site-package
/usr/lib/python2.7
/usr/lib/python2.7/plat-i386-linux-gnu
/usr/lib/python2.7/lib-tk
/usr/lib/python2.7/lib-old
/usr/lib/python2.7/lib-dynload
/usr/local/lib/python2.7/dist-packages
/usr/lib/python2.7/dist-packages/PILcompat
/usr/lib/python2.7/dist-packages/gtk-2.0
/usr/lib/python2.7/dist-packages/ubuntu-sso-client

    程序还可以直接向 sys.path 添加元素来修改路径。

