[Python标准库]sys——系统特定的配置
    作用：提供系统特定的配置和操作。
    Python 版本：1.4 及以后版本
    sys 模块包括一组服务，可以探查或修改解释器的运行时配置以及资源，从而与当前程序之外的操作环境交互。
解释器设置
    sys 包含有一些属性和函数，可以访问解释器的编译时或运行时配置设置。
    1. 构建时版本信息
    构建 C 解释器所用的版本可以有多种形式。sys.version 是一个人类可读的串，通常包含完整的版本号，以及有关构建日期、编译器和平台的信息。sys.hexversion 可以更容易地检查解释器版本，因为它是一个简单的整数。使用 hex() 格式化时，可以清楚地看出，sys.hexversion 的某些部分来自更可读的 sys.version_info 中同样可见的版本信息（这是一个包含 5 部分的元组，只表示版本号）。
    对于加入构建中的源文件，有关的更多特定信息可以从 sys.subversion 元组找到，其中包括签出和构建的具体分支及版本修订。当前解释器使用的 C API 版本保存在 sys.api_version 中。

import sys

print 'Version info:'
print
print 'sys.version      =', repr(sys.version)
print 'sys.version_info =', sys.version_info
print 'sys.hexversion   =', hex(sys.hexversion)
print 'sys.subversion   =', sys.subversion
print 'sys.api_version  =', sys.api_version

    所有这些值都依赖于运行示例程序的具体解释器。

$ python test.py
Version info:

sys.version      = '2.7.6 (default, Jun 22 2015, 18:00:18) \n[GCC 4.8.2]'
sys.version_info = sys.version_info(major=2, minor=7, micro=6, releaselevel='final', serial=0)
sys.hexversion   = 0x20706f0
sys.subversion   = ('CPython', '', '')
sys.api_version  = 1013

    用来构建解释器的操作系统平台保存为 sys.platform。

import sys

print 'This interpreter was built for:', sys.platform

    对于大多数 UNIX 系统，这个值由命令 uname -s 的输出与 uname -r 中版本的第一部分组合而成。对于其他操作系统，则有一个硬编码的值表。

$ python test.py
This interpreter was built for: linux2

    2. 命令行选项
    CPython 解释器接受一些命令行选项来控制解释器的行为；这些选项如表 1.71 所列。
    -----------------------------------------------------------------
        选  项    |              含  义
    -----------------------------------------------------------------
          -B      |    导入时不写入 .py[co] 文件
    -----------------------------------------------------------------
          -d      |    调试解析器的输出
    -----------------------------------------------------------------
          -E      |    忽略 PYTHON* 环境变量（如 PYTHONPATH）
    -----------------------------------------------------------------
          -i      |    运行脚本后交互式检查
    -----------------------------------------------------------------
          -O      |    对生成的字节码稍做优化
    -----------------------------------------------------------------
         -OO      |    除了 -O 优化外，还会删除 docstring
    -----------------------------------------------------------------
          -s      |    不向 sys.path 添加用户站点目录
    -----------------------------------------------------------------
          -S      |    不在初始化时运行“import site”
    -----------------------------------------------------------------
          -t      |    发出警告，指出 tab 使用不一致
    -----------------------------------------------------------------
         -tt      |    发出错误，指出 tab 使用不一致
    -----------------------------------------------------------------
          -v      |    详细显示
    -----------------------------------------------------------------
          -3      |    关于 Python 3.x 不兼容性的警告
    -----------------------------------------------------------------
    其中一些选项可以用于程序，可以通过 sys.flags 来检查。

import sys

if sys.flags.debug:
	print 'Debuging'
if sys.flags.py3k_warning:
	print 'Warning about Python 3.x incompatibilities'
if sys.flags.division_warning:
	print 'Warning about division change'
if sys.flags.division_new:
	print 'New division behavior enabled'
if sys.flags.inspect:
	print 'Will enter interactive mode after running'
if sys.flags.optimize:
	print 'Optimizing byte-code'
if sys.flags.dont_write_bytecode:
	print 'Not writing byte-code files'
if sys.flags.no_site:
	print 'Not importing "site"'
if sys.flags.ignore_environment:
	print 'Ignore environment'
if sys.flags.tabcheck:
	print 'Checking for mixed tabs and spaces'
if sys.flags.verbose:
	print 'Verbose mode'
if sys.flags.unicode:
	print 'Unicode'

    可以尝试使用 sys_flags.py 来了解命令行选项如何映射到标志设置。

$ python -3 -S -E sys_flags.py 
Warning about Python 3.x incompatibilities
Warning about division change
Not importing "site"
Ignore environment
Checking for mixed tabs and spaces

    3. Unicode 默认编码
    要得到解释器使用的默认 Unicode 编码名，可以使用 getdefaulttencoding()。这个值在启动时由 site 设置，它会调用 sys.setdefaultencoding()，然后从 sys 的命名空间将其删除，避免再次调用。
    对于某些操作系统，内部编码默认设置和文件系统编码可能不同，所以要有另外一种方法获取文件系统设置。getfile systemencoding() 会返回一个操作系统特定的值（而不是文件系统特定的值）。

import sys

print 'Default encoding     :', sys.getdefaultencoding()
print 'File system encoding :', sys.getfilesystemencoding()

    大多数 Unicode 专家并不建议改变全局默认编码，而是推荐让应用显式地设置 Unicode。这种方法提供了两个好处：不同的数据源有不同的 Unicode 编码，这样可以更简洁地处理，而且可以减少对应用代码中编码的假设。

$ python test.py
Default encoding     : ascii
File system encoding : UTF-8

    4. 交互式提示语
