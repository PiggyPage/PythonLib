[Python标准库]sys——系统特定的配置
    作用：提供系统特定的配置和操作。
    Python 版本：1.4 及以后版本
    sys 模块包括一组服务，可以探查或修改解释器的运行时配置以及资源，从而与当前程序之外的操作环境交互。
解释器设置
    sys 包含有一些属性和函数，可以访问解释器的编译时或运行时配置设置。
    1. 构建时版本信息
    构建 C 解释器所用的版本可以有多种形式。sys.version 是一个人类可读的串，通常包含完整的版本号，以及有关构建日期、编译器和平台的信息。sys.hexversion 可以更容易地检查解释器版本，因为它是一个简单的整数。使用 hex() 格式化时，可以清楚地看出，sys.hexversion 的某些部分来自更可读的 sys.version_info 中同样可见的版本信息（这是一个包含 5 部分的元组，只表示版本号）。
    对于加入构建中的源文件，有关的更多特定信息可以从 sys.subversion 元组找到，其中包括签出和构建的具体分支及版本修订。当前解释器使用的 C API 版本保存在 sys.api_version 中。

import sys

print 'Version info:'
print
print 'sys.version      =', repr(sys.version)
print 'sys.version_info =', sys.version_info
print 'sys.hexversion   =', hex(sys.hexversion)
print 'sys.subversion   =', sys.subversion
print 'sys.api_version  =', sys.api_version

    所有这些值都依赖于运行示例程序的具体解释器。

$ python test.py
Version info:

sys.version      = '2.7.6 (default, Jun 22 2015, 18:00:18) \n[GCC 4.8.2]'
sys.version_info = sys.version_info(major=2, minor=7, micro=6, releaselevel='final', serial=0)
sys.hexversion   = 0x20706f0
sys.subversion   = ('CPython', '', '')
sys.api_version  = 1013

    用来构建解释器的操作系统平台保存为 sys.platform。

import sys

print 'This interpreter was built for:', sys.platform

    对于大多数 UNIX 系统，这个值由命令 uname -s 的输出与 uname -r 中版本的第一部分组合而成。对于其他操作系统，则有一个硬编码的值表。

$ python test.py
This interpreter was built for: linux2

    2. 命令行选项
    CPython 解释器接受一些命令行选项来控制解释器的行为；这些选项如表 1.71 所列。
    -----------------------------------------------------------------
        选  项    |              含  义
    -----------------------------------------------------------------
          -B      |    导入时不写入 .py[co] 文件
    -----------------------------------------------------------------
          -d      |    调试解析器的输出
    -----------------------------------------------------------------
          -E      |    忽略 PYTHON* 环境变量（如 PYTHONPATH）
    -----------------------------------------------------------------
          -i      |    运行脚本后交互式检查
    -----------------------------------------------------------------
          -O      |    对生成的字节码稍做优化
    -----------------------------------------------------------------
         -OO      |    除了 -O 优化外，还会删除 docstring
    -----------------------------------------------------------------
          -s      |    不向 sys.path 添加用户站点目录
    -----------------------------------------------------------------
          -S      |    不在初始化时运行“import site”
    -----------------------------------------------------------------
          -t      |    发出警告，指出 tab 使用不一致
    -----------------------------------------------------------------
         -tt      |    发出错误，指出 tab 使用不一致
    -----------------------------------------------------------------
          -v      |    详细显示
    -----------------------------------------------------------------
          -3      |    关于 Python 3.x 不兼容性的警告
    -----------------------------------------------------------------
    其中一些选项可以用于程序，可以通过 sys.flags 来检查。

import sys

if sys.flags.debug:
	print 'Debuging'
if sys.flags.py3k_warning:
	print 'Warning about Python 3.x incompatibilities'
if sys.flags.division_warning:
	print 'Warning about division change'
if sys.flags.division_new:
	print 'New division behavior enabled'
if sys.flags.inspect:
	print 'Will enter interactive mode after running'
if sys.flags.optimize:
	print 'Optimizing byte-code'
if sys.flags.dont_write_bytecode:
	print 'Not writing byte-code files'
if sys.flags.no_site:
	print 'Not importing "site"'
if sys.flags.ignore_environment:
	print 'Ignore environment'
if sys.flags.tabcheck:
	print 'Checking for mixed tabs and spaces'
if sys.flags.verbose:
	print 'Verbose mode'
if sys.flags.unicode:
	print 'Unicode'

    可以尝试使用 sys_flags.py 来了解命令行选项如何映射到标志设置。

$ python -3 -S -E sys_flags.py 
Warning about Python 3.x incompatibilities
Warning about division change
Not importing "site"
Ignore environment
Checking for mixed tabs and spaces

    3. Unicode 默认编码
    要得到解释器使用的默认 Unicode 编码名，可以使用 getdefaulttencoding()。这个值在启动时由 site 设置，它会调用 sys.setdefaultencoding()，然后从 sys 的命名空间将其删除，避免再次调用。
    对于某些操作系统，内部编码默认设置和文件系统编码可能不同，所以要有另外一种方法获取文件系统设置。getfile systemencoding() 会返回一个操作系统特定的值（而不是文件系统特定的值）。

import sys

print 'Default encoding     :', sys.getdefaultencoding()
print 'File system encoding :', sys.getfilesystemencoding()

    大多数 Unicode 专家并不建议改变全局默认编码，而是推荐让应用显式地设置 Unicode。这种方法提供了两个好处：不同的数据源有不同的 Unicode 编码，这样可以更简洁地处理，而且可以减少对应用代码中编码的假设。

$ python test.py
Default encoding     : ascii
File system encoding : UTF-8

    4. 交互式提示语
    交互式解释器使用两种不同的提示语来指示默认输入级（ps1）和多行语句的“继续”（ps2）。这些值只用于交互式解释器。

>>> import sys
>>> sys.ps1
'>>> '
>>> sys.ps2
'... '
>>> 

    这两个提示语都可以改为一个不同的串。

>>> sys.ps1 = ':::'
:::sys.ps2 = '~~~'
:::for i in range(3):
~~~    print i
~~~
0
1
2
:::

    或者，只要一个对象可以转换为字符串（通过 __str__ ），就可以用作提示语。

import sys

class LineCounter(object):
	def __init__(self):
		self.count = 0
	def __str__(self):
		self.count += 1
		return '(%3d)> ' % self.count

    LineCounter 会记录它使用了多少次，所以提示语中的数字每次都会增加。

$ python
Python 2.7.6 (default, Jun 22 2015, 18:00:18) 
[GCC 4.8.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> from sys_ps1 import LineCounter
>>> import sys
>>> sys.ps1 = LineCounter()
(  1)> 
(  2)> 
(  3)> 

    5. 显示 hook
    每次用户进入一个表达式时交互式解释器都会调用 sys.displayhook。这个表达式的结果将作为唯一的参数传至函数。

import sys

class ExpressionCounter(object):
	def __init__(self):
		self.count = 0
		self.previous_value = self
	def __call__(self, value):
		print 
		print '  Previous:', self.previous_value
		print '  New     :', value
		print
		if value != self.previous_value:
			self.count += 1
			sys.ps1 = '(%3d)> ' % self.count
		self.previous_value = value
		sys.__displayhook__(value)

print 'installing'
sys.displayhook = ExpressionCounter()

    默认值（保存在 sys.__displayhook__ 中）将结果打印到标准输出（stdout），并把它保存到 .__builtin__._ 以便以后轻松引用。

$ python
Python 2.7.6 (default, Jun 22 2015, 18:00:18) 
[GCC 4.8.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys_displayhook
installing
>>> 1+2

  Previous: <sys_displayhook.ExpressionCounter object at 0xb72430ec>
  New     : 3

3
(  1)> 'abc'

  Previous: 3
  New     : abc

'abc'
(  2)> 'abc'

  Previous: abc
  New     : abc

'abc'
(  2)> 'abc' * 3

  Previous: abc
  New     : abcabcabc

'abcabcabc'
(  3)> 

    6. 安装位置
    只要系统上有一个合理的解释器路径，就可以由 sys.executable 得到具体的解释器程序的路径。这对于确保使用了正确的解释器可能很有用，而且还能对基于解释器位置可能设置的路径给出线索。
    sys.prefix 指示解释器安装的父目录。它通常包括 bin 和 lib 目录，分别存放可执行文件和已安装模块。

import sys

print 'Interpreter executable:', sys.executable
print 'Installation prefix   :', sys.prefix

运行时环境
    sys 提供了一些底层 API 与应用的外部系统交互，可以接受命令行参数、访问用户输入，以及向用户传递消息和状态值。
    1. 命令行参数
    解释器捕获的参数会由解释器处理，不会传递到它运行的程序。其余的所有选项和参数，包括脚本名本身，都保存到 sys.argv，以备程序使用。

import sys

print 'Arguments:', sys.argv

    在第 3 个例子中，-u 选项由解释器处理，不会传递到它运行的程序。

$ python sys_argv.py 
Arguments: ['sys_argv.py']
$ python sys_argv.py -v foo blah
Arguments: ['sys_argv.py', '-v', 'foo', 'blah']
$ python -u sys_argv.py
Arguments: ['sys_argv.py']

    2. 输入和输出流
    遵循 UNIX 编程范式，默认地 Python 程序可以访问 3 个文件描述符。

import sys

print >>sys.stderr, 'STATUS: Reading from stdin'

data = sys.stdin.read()

print >>sys.stderr, 'STATUS: Writing data to stdout'

sys.stdout.write(data)
sys.stdout.flush()

print >>sys.stderr, 'STATUS: Done'

    stdin 是读取输入的标准方式，通常从控制台读取，不过也可以通过管道从其他程序读取。stdout 是为用户写输出的标准方法（写至控制台），或者发送到管道线中的下一个程序。stderr 用于写警告或错误消息。

$ cat sys_stdio.py | python sys_stdio.py 
STATUS: Reading from stdin
STATUS: Writing data to stdout
import sys

print >>sys.stderr, 'STATUS: Reading from stdin'

data = sys.stdin.read()

print >>sys.stderr, 'STATUS: Writing data to stdout'

sys.stdout.write(data)
sys.stdout.flush()

print >>sys.stderr, 'STATUS: Done'STATUS: Done

    3. 返回状态
    要从一个程序返回一个退出码，需要向 sys.exit() 传递一个整数值。

import sys

exit_code = int(sys.argv[1])
sys.exit(exit_code)

    非 0 值表示程序退出时有一个错误。

$ python sys_exit.py 0 ; echo "Exited $?"
Exited 0
$ python sys_exit.py 1 ; echo "Exited $?"
Exited 1

内存管理和限制
    sys 包含一些函数来了解和控制内存使用。
    1. 引用数
    Python 使用引用计数（reference counting）和垃圾回收（garbage collection）来完成自动内存管理。一个对象的引用数降至 0 时，它会自动标志为回收。要查看一个现有对象的引用数，可以使用 getrefcount()。

import sys

one = []
print 'At start         :', sys.getrefcount(one)

two = one
print 'Second reference :', sys.getrefcount(one)

del two
print 'After del        :', sys.getrefcount(one)

    这个数实际上比期望的计数多 1，因为 getrefcount() 本身会维护对象的一个临时引用。

$ python sys_getrefcount.py 
At start         : 2
Second reference : 3
After del        : 2

    2. 对象大小
    了解一个对象有多少引用可以帮助发现环或内存泄露，不过还不足以确定哪些对象消耗的内存最多，这需要指定对象有多大。

import sys

class OldStyle:
	pass

class NewStyle(object):
	pass

for obj in [ [], (), {}, 'c', 'string', 1, 2.3,
			 OldStyle, OldStyle(), NewStyle, NewStyle(),
			 ]:
	print '%10s : %s' % (type(obj).__name__, sys.getsizeof(obj))

    getsizeof() 会报告一个对象的大小（单位为字节）。

$ python sys_getsizeof.py 
      list : 32
     tuple : 24
      dict : 136
       str : 22
       str : 27
       int : 12
     float : 16
  classobj : 48
  instance : 32
      type : 448
  NewStyle : 28

    为定制类报告的大小不包括属性值的大小。

import sys

class WithoutAttributes(object):
	pass

class WithAttributes(object):
	def __init__(self):
		self.a = 'a'
		self.b = 'b'
		return

without_attrs = WithoutAttributes()
print 'WithoutAttributes:', sys.getsizeof(without_attrs)

with_attrs = WithAttributes()
print 'WithAttributes:', sys.getsizeof(with_attrs)

    这可能会让人第消耗的内存量有一个错误的印象。

$ python sys_getsizeof_object.py 
WithoutAttributes: 28
WithAttributes: 28

    对于一个类所用的空间，要得到更全面的估计，模块提供了一个 __sizeof__() 方法来计算这个值，它会累计一个对象各个属性的大小。

import sys

class WithAttributes(object):
	def __init__(self):
		self.a = 'a'
		self.b = 'b'
		return
	def __sizeof__(self):
		return object.__sizeof__(self) + \
			sum(sys.getsizeof(v) for v in self.__dict__.values())

my_inst = WithAttributes()
print sys.getsizeof(my_inst)

    这个版本将对象的基本大小加上存储在内部 __dict__ 中的所有属性的大小来计算对象大小。

$ python sys_getsizeof_custom.py 
72

    3. 递归
