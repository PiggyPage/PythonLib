[Python标准库]unittest——自动测试框架
    作用：自动测试框架
    Python 版本：2.1 及以后版本
    Python 的 unittest 模块（有时称为 PyUnit）基于 Kent Beck 和 Erich Gamma 提出的 XUnit 框架设计。同样的模式在很多其他语言中都有出现，包括 C、Perl、Java 和 Smalltalk。unittest 实现的框架支持固件和测试套件，还提供了一个测试运行工具来完成自动测试。
基本测试结构
    按照 unittest 的定义，测试有两个部分：管理测试依赖库的代码（称为“固件”）和测试本身。单个测试通过派生 Test-Case 并覆盖或添加适当的方法来创建。例如：

import unittest

class SimplisticTest(unittest.TestCase):

	def test(self):
		self.failUnless(True)

if __name__ == '__main__':
	unittest.main()

    在这个例子中，SimplisticTest 有一个 test() 方法，如果 True 总为 False 则该方法失败。
运行测试
    运行 unittest 测试时，最容易的方法是在每个测试文件最后包括以下代码：

if __name__ == '__main__':
	unittest.main()

    然后只需从命令行直接运行脚本。

$ python test.py
.
----------------------------------------------------------------------
Ran 1 test in 0.000s

OK

    这里的简略输出包括测试花费的时间，并为每个测试提供了一个状态指示符（输出第一行上的“.”表示一个测试通过）。要得到更详细的测试结果，可以包括 -v 选项：

$ python test.py -v
test (__main__.SimplisticTest) ... ok

----------------------------------------------------------------------
Ran 1 test in 0.000s

OK

测试结果
    测试有 3 种可能的结果，如下表所述。
    --------------------------------------------------------------
        结果    |                      描述
    --------------------------------------------------------------
        ok      |    测试通过
    --------------------------------------------------------------
        FAIL    |    测试没有通过，产生一个 AssertionError 异常
    --------------------------------------------------------------
        ERROR   |    测试产生 AssertionError 以外的某个异常
    --------------------------------------------------------------
    没有明确的方法让一个测试“通过”，所以一个测试的状态取决于是否出现异常。
